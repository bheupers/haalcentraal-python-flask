from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.abstract_datum import AbstractDatum
from openapi_server.models.abstract_gezagsrelatie import AbstractGezagsrelatie
from openapi_server.models.abstract_nationaliteit import AbstractNationaliteit
from openapi_server.models.abstract_verblijfplaats import AbstractVerblijfplaats
from openapi_server.models.adressering import Adressering
from openapi_server.models.europees_kiesrecht import EuropeesKiesrecht
from openapi_server.models.geboorte import Geboorte
from openapi_server.models.immigratie import Immigratie
from openapi_server.models.kind import Kind
from openapi_server.models.naam_persoon import NaamPersoon
from openapi_server.models.opschorting_bijhouding import OpschortingBijhouding
from openapi_server.models.ouder import Ouder
from openapi_server.models.overlijden import Overlijden
from openapi_server.models.partner import Partner
from openapi_server.models.persoon_in_onderzoek import PersoonInOnderzoek
from openapi_server.models.persoon_indicatie_gezag_minderjarige import PersoonIndicatieGezagMinderjarige
from openapi_server.models.rni_deelnemer import RniDeelnemer
from openapi_server.models.uitsluiting_kiesrecht import UitsluitingKiesrecht
from openapi_server.models.verblijfstitel import Verblijfstitel
from openapi_server.models.verificatie import Verificatie
from openapi_server.models.waardetabel import Waardetabel
import re
from openapi_server import util

from openapi_server.models.abstract_datum import AbstractDatum  # noqa: E501
from openapi_server.models.abstract_gezagsrelatie import AbstractGezagsrelatie  # noqa: E501
from openapi_server.models.abstract_nationaliteit import AbstractNationaliteit  # noqa: E501
from openapi_server.models.abstract_verblijfplaats import AbstractVerblijfplaats  # noqa: E501
from openapi_server.models.adressering import Adressering  # noqa: E501
from openapi_server.models.europees_kiesrecht import EuropeesKiesrecht  # noqa: E501
from openapi_server.models.geboorte import Geboorte  # noqa: E501
from openapi_server.models.immigratie import Immigratie  # noqa: E501
from openapi_server.models.kind import Kind  # noqa: E501
from openapi_server.models.naam_persoon import NaamPersoon  # noqa: E501
from openapi_server.models.opschorting_bijhouding import OpschortingBijhouding  # noqa: E501
from openapi_server.models.ouder import Ouder  # noqa: E501
from openapi_server.models.overlijden import Overlijden  # noqa: E501
from openapi_server.models.partner import Partner  # noqa: E501
from openapi_server.models.persoon_in_onderzoek import PersoonInOnderzoek  # noqa: E501
from openapi_server.models.persoon_indicatie_gezag_minderjarige import PersoonIndicatieGezagMinderjarige  # noqa: E501
from openapi_server.models.rni_deelnemer import RniDeelnemer  # noqa: E501
from openapi_server.models.uitsluiting_kiesrecht import UitsluitingKiesrecht  # noqa: E501
from openapi_server.models.verblijfstitel import Verblijfstitel  # noqa: E501
from openapi_server.models.verificatie import Verificatie  # noqa: E501
from openapi_server.models.waardetabel import Waardetabel  # noqa: E501
import re  # noqa: E501

class Persoon(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, a_nummer=None, burgerservicenummer=None, datum_eerste_inschrijving_gba=None, geheimhouding_persoonsgegevens=None, geslacht=None, in_onderzoek=None, uitsluiting_kiesrecht=None, europees_kiesrecht=None, leeftijd=None, naam=None, nationaliteiten=None, geboorte=None, opschorting_bijhouding=None, overlijden=None, verblijfplaats=None, immigratie=None, gemeente_van_inschrijving=None, datum_inschrijving_in_gemeente=None, adressering=None, indicatie_curatele_register=None, indicatie_gezag_minderjarige=None, gezag=None, verblijfstitel=None, kinderen=None, ouders=None, partners=None, rni=None, verificatie=None):  # noqa: E501
        """Persoon - a model defined in OpenAPI

        :param a_nummer: The a_nummer of this Persoon.  # noqa: E501
        :type a_nummer: str
        :param burgerservicenummer: The burgerservicenummer of this Persoon.  # noqa: E501
        :type burgerservicenummer: str
        :param datum_eerste_inschrijving_gba: The datum_eerste_inschrijving_gba of this Persoon.  # noqa: E501
        :type datum_eerste_inschrijving_gba: AbstractDatum
        :param geheimhouding_persoonsgegevens: The geheimhouding_persoonsgegevens of this Persoon.  # noqa: E501
        :type geheimhouding_persoonsgegevens: bool
        :param geslacht: The geslacht of this Persoon.  # noqa: E501
        :type geslacht: Waardetabel
        :param in_onderzoek: The in_onderzoek of this Persoon.  # noqa: E501
        :type in_onderzoek: PersoonInOnderzoek
        :param uitsluiting_kiesrecht: The uitsluiting_kiesrecht of this Persoon.  # noqa: E501
        :type uitsluiting_kiesrecht: UitsluitingKiesrecht
        :param europees_kiesrecht: The europees_kiesrecht of this Persoon.  # noqa: E501
        :type europees_kiesrecht: EuropeesKiesrecht
        :param leeftijd: The leeftijd of this Persoon.  # noqa: E501
        :type leeftijd: int
        :param naam: The naam of this Persoon.  # noqa: E501
        :type naam: NaamPersoon
        :param nationaliteiten: The nationaliteiten of this Persoon.  # noqa: E501
        :type nationaliteiten: List[AbstractNationaliteit]
        :param geboorte: The geboorte of this Persoon.  # noqa: E501
        :type geboorte: Geboorte
        :param opschorting_bijhouding: The opschorting_bijhouding of this Persoon.  # noqa: E501
        :type opschorting_bijhouding: OpschortingBijhouding
        :param overlijden: The overlijden of this Persoon.  # noqa: E501
        :type overlijden: Overlijden
        :param verblijfplaats: The verblijfplaats of this Persoon.  # noqa: E501
        :type verblijfplaats: AbstractVerblijfplaats
        :param immigratie: The immigratie of this Persoon.  # noqa: E501
        :type immigratie: Immigratie
        :param gemeente_van_inschrijving: The gemeente_van_inschrijving of this Persoon.  # noqa: E501
        :type gemeente_van_inschrijving: Waardetabel
        :param datum_inschrijving_in_gemeente: The datum_inschrijving_in_gemeente of this Persoon.  # noqa: E501
        :type datum_inschrijving_in_gemeente: AbstractDatum
        :param adressering: The adressering of this Persoon.  # noqa: E501
        :type adressering: Adressering
        :param indicatie_curatele_register: The indicatie_curatele_register of this Persoon.  # noqa: E501
        :type indicatie_curatele_register: bool
        :param indicatie_gezag_minderjarige: The indicatie_gezag_minderjarige of this Persoon.  # noqa: E501
        :type indicatie_gezag_minderjarige: PersoonIndicatieGezagMinderjarige
        :param gezag: The gezag of this Persoon.  # noqa: E501
        :type gezag: List[AbstractGezagsrelatie]
        :param verblijfstitel: The verblijfstitel of this Persoon.  # noqa: E501
        :type verblijfstitel: Verblijfstitel
        :param kinderen: The kinderen of this Persoon.  # noqa: E501
        :type kinderen: List[Kind]
        :param ouders: The ouders of this Persoon.  # noqa: E501
        :type ouders: List[Ouder]
        :param partners: The partners of this Persoon.  # noqa: E501
        :type partners: List[Partner]
        :param rni: The rni of this Persoon.  # noqa: E501
        :type rni: List[RniDeelnemer]
        :param verificatie: The verificatie of this Persoon.  # noqa: E501
        :type verificatie: Verificatie
        """
        self.openapi_types = {
            'a_nummer': str,
            'burgerservicenummer': str,
            'datum_eerste_inschrijving_gba': AbstractDatum,
            'geheimhouding_persoonsgegevens': bool,
            'geslacht': Waardetabel,
            'in_onderzoek': PersoonInOnderzoek,
            'uitsluiting_kiesrecht': UitsluitingKiesrecht,
            'europees_kiesrecht': EuropeesKiesrecht,
            'leeftijd': int,
            'naam': NaamPersoon,
            'nationaliteiten': List[AbstractNationaliteit],
            'geboorte': Geboorte,
            'opschorting_bijhouding': OpschortingBijhouding,
            'overlijden': Overlijden,
            'verblijfplaats': AbstractVerblijfplaats,
            'immigratie': Immigratie,
            'gemeente_van_inschrijving': Waardetabel,
            'datum_inschrijving_in_gemeente': AbstractDatum,
            'adressering': Adressering,
            'indicatie_curatele_register': bool,
            'indicatie_gezag_minderjarige': PersoonIndicatieGezagMinderjarige,
            'gezag': List[AbstractGezagsrelatie],
            'verblijfstitel': Verblijfstitel,
            'kinderen': List[Kind],
            'ouders': List[Ouder],
            'partners': List[Partner],
            'rni': List[RniDeelnemer],
            'verificatie': Verificatie
        }

        self.attribute_map = {
            'a_nummer': 'aNummer',
            'burgerservicenummer': 'burgerservicenummer',
            'datum_eerste_inschrijving_gba': 'datumEersteInschrijvingGBA',
            'geheimhouding_persoonsgegevens': 'geheimhoudingPersoonsgegevens',
            'geslacht': 'geslacht',
            'in_onderzoek': 'inOnderzoek',
            'uitsluiting_kiesrecht': 'uitsluitingKiesrecht',
            'europees_kiesrecht': 'europeesKiesrecht',
            'leeftijd': 'leeftijd',
            'naam': 'naam',
            'nationaliteiten': 'nationaliteiten',
            'geboorte': 'geboorte',
            'opschorting_bijhouding': 'opschortingBijhouding',
            'overlijden': 'overlijden',
            'verblijfplaats': 'verblijfplaats',
            'immigratie': 'immigratie',
            'gemeente_van_inschrijving': 'gemeenteVanInschrijving',
            'datum_inschrijving_in_gemeente': 'datumInschrijvingInGemeente',
            'adressering': 'adressering',
            'indicatie_curatele_register': 'indicatieCurateleRegister',
            'indicatie_gezag_minderjarige': 'indicatieGezagMinderjarige',
            'gezag': 'gezag',
            'verblijfstitel': 'verblijfstitel',
            'kinderen': 'kinderen',
            'ouders': 'ouders',
            'partners': 'partners',
            'rni': 'rni',
            'verificatie': 'verificatie'
        }

        self._a_nummer = a_nummer
        self._burgerservicenummer = burgerservicenummer
        self._datum_eerste_inschrijving_gba = datum_eerste_inschrijving_gba
        self._geheimhouding_persoonsgegevens = geheimhouding_persoonsgegevens
        self._geslacht = geslacht
        self._in_onderzoek = in_onderzoek
        self._uitsluiting_kiesrecht = uitsluiting_kiesrecht
        self._europees_kiesrecht = europees_kiesrecht
        self._leeftijd = leeftijd
        self._naam = naam
        self._nationaliteiten = nationaliteiten
        self._geboorte = geboorte
        self._opschorting_bijhouding = opschorting_bijhouding
        self._overlijden = overlijden
        self._verblijfplaats = verblijfplaats
        self._immigratie = immigratie
        self._gemeente_van_inschrijving = gemeente_van_inschrijving
        self._datum_inschrijving_in_gemeente = datum_inschrijving_in_gemeente
        self._adressering = adressering
        self._indicatie_curatele_register = indicatie_curatele_register
        self._indicatie_gezag_minderjarige = indicatie_gezag_minderjarige
        self._gezag = gezag
        self._verblijfstitel = verblijfstitel
        self._kinderen = kinderen
        self._ouders = ouders
        self._partners = partners
        self._rni = rni
        self._verificatie = verificatie

    @classmethod
    def from_dict(cls, dikt) -> 'Persoon':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Persoon of this Persoon.  # noqa: E501
        :rtype: Persoon
        """
        return util.deserialize_model(dikt, cls)

    @property
    def a_nummer(self) -> str:
        """Gets the a_nummer of this Persoon.

        Het A-nummer van de persoon   # noqa: E501

        :return: The a_nummer of this Persoon.
        :rtype: str
        """
        return self._a_nummer

    @a_nummer.setter
    def a_nummer(self, a_nummer: str):
        """Sets the a_nummer of this Persoon.

        Het A-nummer van de persoon   # noqa: E501

        :param a_nummer: The a_nummer of this Persoon.
        :type a_nummer: str
        """
        if a_nummer is not None and not re.search(r'^[0-9]{10}$', a_nummer):  # noqa: E501
            raise ValueError(r"Invalid value for `a_nummer`, must be a follow pattern or equal to `/^[0-9]{10}$/`")  # noqa: E501

        self._a_nummer = a_nummer

    @property
    def burgerservicenummer(self) -> str:
        """Gets the burgerservicenummer of this Persoon.


        :return: The burgerservicenummer of this Persoon.
        :rtype: str
        """
        return self._burgerservicenummer

    @burgerservicenummer.setter
    def burgerservicenummer(self, burgerservicenummer: str):
        """Sets the burgerservicenummer of this Persoon.


        :param burgerservicenummer: The burgerservicenummer of this Persoon.
        :type burgerservicenummer: str
        """
        if burgerservicenummer is not None and not re.search(r'^[0-9]{9}$', burgerservicenummer):  # noqa: E501
            raise ValueError(r"Invalid value for `burgerservicenummer`, must be a follow pattern or equal to `/^[0-9]{9}$/`")  # noqa: E501

        self._burgerservicenummer = burgerservicenummer

    @property
    def datum_eerste_inschrijving_gba(self) -> AbstractDatum:
        """Gets the datum_eerste_inschrijving_gba of this Persoon.


        :return: The datum_eerste_inschrijving_gba of this Persoon.
        :rtype: AbstractDatum
        """
        return self._datum_eerste_inschrijving_gba

    @datum_eerste_inschrijving_gba.setter
    def datum_eerste_inschrijving_gba(self, datum_eerste_inschrijving_gba: AbstractDatum):
        """Sets the datum_eerste_inschrijving_gba of this Persoon.


        :param datum_eerste_inschrijving_gba: The datum_eerste_inschrijving_gba of this Persoon.
        :type datum_eerste_inschrijving_gba: AbstractDatum
        """

        self._datum_eerste_inschrijving_gba = datum_eerste_inschrijving_gba

    @property
    def geheimhouding_persoonsgegevens(self) -> bool:
        """Gets the geheimhouding_persoonsgegevens of this Persoon.

        Gegevens mogen niet worden verstrekt aan derden / maatschappelijke instellingen.   # noqa: E501

        :return: The geheimhouding_persoonsgegevens of this Persoon.
        :rtype: bool
        """
        return self._geheimhouding_persoonsgegevens

    @geheimhouding_persoonsgegevens.setter
    def geheimhouding_persoonsgegevens(self, geheimhouding_persoonsgegevens: bool):
        """Sets the geheimhouding_persoonsgegevens of this Persoon.

        Gegevens mogen niet worden verstrekt aan derden / maatschappelijke instellingen.   # noqa: E501

        :param geheimhouding_persoonsgegevens: The geheimhouding_persoonsgegevens of this Persoon.
        :type geheimhouding_persoonsgegevens: bool
        """

        self._geheimhouding_persoonsgegevens = geheimhouding_persoonsgegevens

    @property
    def geslacht(self) -> Waardetabel:
        """Gets the geslacht of this Persoon.


        :return: The geslacht of this Persoon.
        :rtype: Waardetabel
        """
        return self._geslacht

    @geslacht.setter
    def geslacht(self, geslacht: Waardetabel):
        """Sets the geslacht of this Persoon.


        :param geslacht: The geslacht of this Persoon.
        :type geslacht: Waardetabel
        """

        self._geslacht = geslacht

    @property
    def in_onderzoek(self) -> PersoonInOnderzoek:
        """Gets the in_onderzoek of this Persoon.


        :return: The in_onderzoek of this Persoon.
        :rtype: PersoonInOnderzoek
        """
        return self._in_onderzoek

    @in_onderzoek.setter
    def in_onderzoek(self, in_onderzoek: PersoonInOnderzoek):
        """Sets the in_onderzoek of this Persoon.


        :param in_onderzoek: The in_onderzoek of this Persoon.
        :type in_onderzoek: PersoonInOnderzoek
        """

        self._in_onderzoek = in_onderzoek

    @property
    def uitsluiting_kiesrecht(self) -> UitsluitingKiesrecht:
        """Gets the uitsluiting_kiesrecht of this Persoon.


        :return: The uitsluiting_kiesrecht of this Persoon.
        :rtype: UitsluitingKiesrecht
        """
        return self._uitsluiting_kiesrecht

    @uitsluiting_kiesrecht.setter
    def uitsluiting_kiesrecht(self, uitsluiting_kiesrecht: UitsluitingKiesrecht):
        """Sets the uitsluiting_kiesrecht of this Persoon.


        :param uitsluiting_kiesrecht: The uitsluiting_kiesrecht of this Persoon.
        :type uitsluiting_kiesrecht: UitsluitingKiesrecht
        """

        self._uitsluiting_kiesrecht = uitsluiting_kiesrecht

    @property
    def europees_kiesrecht(self) -> EuropeesKiesrecht:
        """Gets the europees_kiesrecht of this Persoon.


        :return: The europees_kiesrecht of this Persoon.
        :rtype: EuropeesKiesrecht
        """
        return self._europees_kiesrecht

    @europees_kiesrecht.setter
    def europees_kiesrecht(self, europees_kiesrecht: EuropeesKiesrecht):
        """Sets the europees_kiesrecht of this Persoon.


        :param europees_kiesrecht: The europees_kiesrecht of this Persoon.
        :type europees_kiesrecht: EuropeesKiesrecht
        """

        self._europees_kiesrecht = europees_kiesrecht

    @property
    def leeftijd(self) -> int:
        """Gets the leeftijd of this Persoon.

        Leeftijd in jaren op het moment van bevragen.   # noqa: E501

        :return: The leeftijd of this Persoon.
        :rtype: int
        """
        return self._leeftijd

    @leeftijd.setter
    def leeftijd(self, leeftijd: int):
        """Sets the leeftijd of this Persoon.

        Leeftijd in jaren op het moment van bevragen.   # noqa: E501

        :param leeftijd: The leeftijd of this Persoon.
        :type leeftijd: int
        """
        if leeftijd is not None and leeftijd > 150:  # noqa: E501
            raise ValueError("Invalid value for `leeftijd`, must be a value less than or equal to `150`")  # noqa: E501
        if leeftijd is not None and leeftijd < 0:  # noqa: E501
            raise ValueError("Invalid value for `leeftijd`, must be a value greater than or equal to `0`")  # noqa: E501

        self._leeftijd = leeftijd

    @property
    def naam(self) -> NaamPersoon:
        """Gets the naam of this Persoon.


        :return: The naam of this Persoon.
        :rtype: NaamPersoon
        """
        return self._naam

    @naam.setter
    def naam(self, naam: NaamPersoon):
        """Sets the naam of this Persoon.


        :param naam: The naam of this Persoon.
        :type naam: NaamPersoon
        """

        self._naam = naam

    @property
    def nationaliteiten(self) -> List[AbstractNationaliteit]:
        """Gets the nationaliteiten of this Persoon.


        :return: The nationaliteiten of this Persoon.
        :rtype: List[AbstractNationaliteit]
        """
        return self._nationaliteiten

    @nationaliteiten.setter
    def nationaliteiten(self, nationaliteiten: List[AbstractNationaliteit]):
        """Sets the nationaliteiten of this Persoon.


        :param nationaliteiten: The nationaliteiten of this Persoon.
        :type nationaliteiten: List[AbstractNationaliteit]
        """

        self._nationaliteiten = nationaliteiten

    @property
    def geboorte(self) -> Geboorte:
        """Gets the geboorte of this Persoon.


        :return: The geboorte of this Persoon.
        :rtype: Geboorte
        """
        return self._geboorte

    @geboorte.setter
    def geboorte(self, geboorte: Geboorte):
        """Sets the geboorte of this Persoon.


        :param geboorte: The geboorte of this Persoon.
        :type geboorte: Geboorte
        """

        self._geboorte = geboorte

    @property
    def opschorting_bijhouding(self) -> OpschortingBijhouding:
        """Gets the opschorting_bijhouding of this Persoon.


        :return: The opschorting_bijhouding of this Persoon.
        :rtype: OpschortingBijhouding
        """
        return self._opschorting_bijhouding

    @opschorting_bijhouding.setter
    def opschorting_bijhouding(self, opschorting_bijhouding: OpschortingBijhouding):
        """Sets the opschorting_bijhouding of this Persoon.


        :param opschorting_bijhouding: The opschorting_bijhouding of this Persoon.
        :type opschorting_bijhouding: OpschortingBijhouding
        """

        self._opschorting_bijhouding = opschorting_bijhouding

    @property
    def overlijden(self) -> Overlijden:
        """Gets the overlijden of this Persoon.


        :return: The overlijden of this Persoon.
        :rtype: Overlijden
        """
        return self._overlijden

    @overlijden.setter
    def overlijden(self, overlijden: Overlijden):
        """Sets the overlijden of this Persoon.


        :param overlijden: The overlijden of this Persoon.
        :type overlijden: Overlijden
        """

        self._overlijden = overlijden

    @property
    def verblijfplaats(self) -> AbstractVerblijfplaats:
        """Gets the verblijfplaats of this Persoon.


        :return: The verblijfplaats of this Persoon.
        :rtype: AbstractVerblijfplaats
        """
        return self._verblijfplaats

    @verblijfplaats.setter
    def verblijfplaats(self, verblijfplaats: AbstractVerblijfplaats):
        """Sets the verblijfplaats of this Persoon.


        :param verblijfplaats: The verblijfplaats of this Persoon.
        :type verblijfplaats: AbstractVerblijfplaats
        """

        self._verblijfplaats = verblijfplaats

    @property
    def immigratie(self) -> Immigratie:
        """Gets the immigratie of this Persoon.


        :return: The immigratie of this Persoon.
        :rtype: Immigratie
        """
        return self._immigratie

    @immigratie.setter
    def immigratie(self, immigratie: Immigratie):
        """Sets the immigratie of this Persoon.


        :param immigratie: The immigratie of this Persoon.
        :type immigratie: Immigratie
        """

        self._immigratie = immigratie

    @property
    def gemeente_van_inschrijving(self) -> Waardetabel:
        """Gets the gemeente_van_inschrijving of this Persoon.


        :return: The gemeente_van_inschrijving of this Persoon.
        :rtype: Waardetabel
        """
        return self._gemeente_van_inschrijving

    @gemeente_van_inschrijving.setter
    def gemeente_van_inschrijving(self, gemeente_van_inschrijving: Waardetabel):
        """Sets the gemeente_van_inschrijving of this Persoon.


        :param gemeente_van_inschrijving: The gemeente_van_inschrijving of this Persoon.
        :type gemeente_van_inschrijving: Waardetabel
        """

        self._gemeente_van_inschrijving = gemeente_van_inschrijving

    @property
    def datum_inschrijving_in_gemeente(self) -> AbstractDatum:
        """Gets the datum_inschrijving_in_gemeente of this Persoon.


        :return: The datum_inschrijving_in_gemeente of this Persoon.
        :rtype: AbstractDatum
        """
        return self._datum_inschrijving_in_gemeente

    @datum_inschrijving_in_gemeente.setter
    def datum_inschrijving_in_gemeente(self, datum_inschrijving_in_gemeente: AbstractDatum):
        """Sets the datum_inschrijving_in_gemeente of this Persoon.


        :param datum_inschrijving_in_gemeente: The datum_inschrijving_in_gemeente of this Persoon.
        :type datum_inschrijving_in_gemeente: AbstractDatum
        """

        self._datum_inschrijving_in_gemeente = datum_inschrijving_in_gemeente

    @property
    def adressering(self) -> Adressering:
        """Gets the adressering of this Persoon.


        :return: The adressering of this Persoon.
        :rtype: Adressering
        """
        return self._adressering

    @adressering.setter
    def adressering(self, adressering: Adressering):
        """Sets the adressering of this Persoon.


        :param adressering: The adressering of this Persoon.
        :type adressering: Adressering
        """

        self._adressering = adressering

    @property
    def indicatie_curatele_register(self) -> bool:
        """Gets the indicatie_curatele_register of this Persoon.

        Geeft aan dat de persoon onder curatele is gesteld.   # noqa: E501

        :return: The indicatie_curatele_register of this Persoon.
        :rtype: bool
        """
        return self._indicatie_curatele_register

    @indicatie_curatele_register.setter
    def indicatie_curatele_register(self, indicatie_curatele_register: bool):
        """Sets the indicatie_curatele_register of this Persoon.

        Geeft aan dat de persoon onder curatele is gesteld.   # noqa: E501

        :param indicatie_curatele_register: The indicatie_curatele_register of this Persoon.
        :type indicatie_curatele_register: bool
        """

        self._indicatie_curatele_register = indicatie_curatele_register

    @property
    def indicatie_gezag_minderjarige(self) -> PersoonIndicatieGezagMinderjarige:
        """Gets the indicatie_gezag_minderjarige of this Persoon.


        :return: The indicatie_gezag_minderjarige of this Persoon.
        :rtype: PersoonIndicatieGezagMinderjarige
        """
        return self._indicatie_gezag_minderjarige

    @indicatie_gezag_minderjarige.setter
    def indicatie_gezag_minderjarige(self, indicatie_gezag_minderjarige: PersoonIndicatieGezagMinderjarige):
        """Sets the indicatie_gezag_minderjarige of this Persoon.


        :param indicatie_gezag_minderjarige: The indicatie_gezag_minderjarige of this Persoon.
        :type indicatie_gezag_minderjarige: PersoonIndicatieGezagMinderjarige
        """

        self._indicatie_gezag_minderjarige = indicatie_gezag_minderjarige

    @property
    def gezag(self) -> List[AbstractGezagsrelatie]:
        """Gets the gezag of this Persoon.


        :return: The gezag of this Persoon.
        :rtype: List[AbstractGezagsrelatie]
        """
        return self._gezag

    @gezag.setter
    def gezag(self, gezag: List[AbstractGezagsrelatie]):
        """Sets the gezag of this Persoon.


        :param gezag: The gezag of this Persoon.
        :type gezag: List[AbstractGezagsrelatie]
        """
        if gezag is not None and len(gezag) < 0:
            raise ValueError("Invalid value for `gezag`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._gezag = gezag

    @property
    def verblijfstitel(self) -> Verblijfstitel:
        """Gets the verblijfstitel of this Persoon.


        :return: The verblijfstitel of this Persoon.
        :rtype: Verblijfstitel
        """
        return self._verblijfstitel

    @verblijfstitel.setter
    def verblijfstitel(self, verblijfstitel: Verblijfstitel):
        """Sets the verblijfstitel of this Persoon.


        :param verblijfstitel: The verblijfstitel of this Persoon.
        :type verblijfstitel: Verblijfstitel
        """

        self._verblijfstitel = verblijfstitel

    @property
    def kinderen(self) -> List[Kind]:
        """Gets the kinderen of this Persoon.


        :return: The kinderen of this Persoon.
        :rtype: List[Kind]
        """
        return self._kinderen

    @kinderen.setter
    def kinderen(self, kinderen: List[Kind]):
        """Sets the kinderen of this Persoon.


        :param kinderen: The kinderen of this Persoon.
        :type kinderen: List[Kind]
        """

        self._kinderen = kinderen

    @property
    def ouders(self) -> List[Ouder]:
        """Gets the ouders of this Persoon.


        :return: The ouders of this Persoon.
        :rtype: List[Ouder]
        """
        return self._ouders

    @ouders.setter
    def ouders(self, ouders: List[Ouder]):
        """Sets the ouders of this Persoon.


        :param ouders: The ouders of this Persoon.
        :type ouders: List[Ouder]
        """

        self._ouders = ouders

    @property
    def partners(self) -> List[Partner]:
        """Gets the partners of this Persoon.


        :return: The partners of this Persoon.
        :rtype: List[Partner]
        """
        return self._partners

    @partners.setter
    def partners(self, partners: List[Partner]):
        """Sets the partners of this Persoon.


        :param partners: The partners of this Persoon.
        :type partners: List[Partner]
        """

        self._partners = partners

    @property
    def rni(self) -> List[RniDeelnemer]:
        """Gets the rni of this Persoon.


        :return: The rni of this Persoon.
        :rtype: List[RniDeelnemer]
        """
        return self._rni

    @rni.setter
    def rni(self, rni: List[RniDeelnemer]):
        """Sets the rni of this Persoon.


        :param rni: The rni of this Persoon.
        :type rni: List[RniDeelnemer]
        """

        self._rni = rni

    @property
    def verificatie(self) -> Verificatie:
        """Gets the verificatie of this Persoon.


        :return: The verificatie of this Persoon.
        :rtype: Verificatie
        """
        return self._verificatie

    @verificatie.setter
    def verificatie(self, verificatie: Verificatie):
        """Sets the verificatie of this Persoon.


        :param verificatie: The verificatie of this Persoon.
        :type verificatie: Verificatie
        """

        self._verificatie = verificatie
