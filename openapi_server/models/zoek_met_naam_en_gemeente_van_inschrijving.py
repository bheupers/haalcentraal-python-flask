from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.personen_query import PersonenQuery
import re
from openapi_server import util

from openapi_server.models.personen_query import PersonenQuery  # noqa: E501
import re  # noqa: E501

class ZoekMetNaamEnGemeenteVanInschrijving(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, fields=None, gemeente_van_inschrijving=None, inclusief_overleden_personen=None, geslacht=None, geslachtsnaam=None, voorvoegsel=None, voornamen=None):  # noqa: E501
        """ZoekMetNaamEnGemeenteVanInschrijving - a model defined in OpenAPI

        :param type: The type of this ZoekMetNaamEnGemeenteVanInschrijving.  # noqa: E501
        :type type: str
        :param fields: The fields of this ZoekMetNaamEnGemeenteVanInschrijving.  # noqa: E501
        :type fields: List[str]
        :param gemeente_van_inschrijving: The gemeente_van_inschrijving of this ZoekMetNaamEnGemeenteVanInschrijving.  # noqa: E501
        :type gemeente_van_inschrijving: str
        :param inclusief_overleden_personen: The inclusief_overleden_personen of this ZoekMetNaamEnGemeenteVanInschrijving.  # noqa: E501
        :type inclusief_overleden_personen: bool
        :param geslacht: The geslacht of this ZoekMetNaamEnGemeenteVanInschrijving.  # noqa: E501
        :type geslacht: str
        :param geslachtsnaam: The geslachtsnaam of this ZoekMetNaamEnGemeenteVanInschrijving.  # noqa: E501
        :type geslachtsnaam: str
        :param voorvoegsel: The voorvoegsel of this ZoekMetNaamEnGemeenteVanInschrijving.  # noqa: E501
        :type voorvoegsel: str
        :param voornamen: The voornamen of this ZoekMetNaamEnGemeenteVanInschrijving.  # noqa: E501
        :type voornamen: str
        """
        self.openapi_types = {
            'type': str,
            'fields': List[str],
            'gemeente_van_inschrijving': str,
            'inclusief_overleden_personen': bool,
            'geslacht': str,
            'geslachtsnaam': str,
            'voorvoegsel': str,
            'voornamen': str
        }

        self.attribute_map = {
            'type': 'type',
            'fields': 'fields',
            'gemeente_van_inschrijving': 'gemeenteVanInschrijving',
            'inclusief_overleden_personen': 'inclusiefOverledenPersonen',
            'geslacht': 'geslacht',
            'geslachtsnaam': 'geslachtsnaam',
            'voorvoegsel': 'voorvoegsel',
            'voornamen': 'voornamen'
        }

        self._type = type
        self._fields = fields
        self._gemeente_van_inschrijving = gemeente_van_inschrijving
        self._inclusief_overleden_personen = inclusief_overleden_personen
        self._geslacht = geslacht
        self._geslachtsnaam = geslachtsnaam
        self._voorvoegsel = voorvoegsel
        self._voornamen = voornamen

    @classmethod
    def from_dict(cls, dikt) -> 'ZoekMetNaamEnGemeenteVanInschrijving':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ZoekMetNaamEnGemeenteVanInschrijving of this ZoekMetNaamEnGemeenteVanInschrijving.  # noqa: E501
        :rtype: ZoekMetNaamEnGemeenteVanInschrijving
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this ZoekMetNaamEnGemeenteVanInschrijving.


        :return: The type of this ZoekMetNaamEnGemeenteVanInschrijving.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ZoekMetNaamEnGemeenteVanInschrijving.


        :param type: The type of this ZoekMetNaamEnGemeenteVanInschrijving.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def fields(self) -> List[str]:
        """Gets the fields of this ZoekMetNaamEnGemeenteVanInschrijving.

        Hiermee kun je de velden opgeven die je wenst te ontvangen.  Velden die automatisch worden geleverd (inOnderzoek, geheimhoudingPersoonsgegevens, opschortingBijhouding, rni en verificatie) mag je niet opgeven in fields. Opgave van een pad dat verwijst naar een niet-bestaand veld of naar een automatisch geleverd veld leidt tot een 400 Bad Request.  Meer details over hoe fields werkt lees je in het [feature overzicht](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/features-overzicht#filteren-van-de-velden-van-de-gevonden-personen). Stel je fields eenvoudig samen met de [fields tool](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/fields){:target=\"_blank\" rel=\"noopener\"}.   # noqa: E501

        :return: The fields of this ZoekMetNaamEnGemeenteVanInschrijving.
        :rtype: List[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields: List[str]):
        """Sets the fields of this ZoekMetNaamEnGemeenteVanInschrijving.

        Hiermee kun je de velden opgeven die je wenst te ontvangen.  Velden die automatisch worden geleverd (inOnderzoek, geheimhoudingPersoonsgegevens, opschortingBijhouding, rni en verificatie) mag je niet opgeven in fields. Opgave van een pad dat verwijst naar een niet-bestaand veld of naar een automatisch geleverd veld leidt tot een 400 Bad Request.  Meer details over hoe fields werkt lees je in het [feature overzicht](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/features-overzicht#filteren-van-de-velden-van-de-gevonden-personen). Stel je fields eenvoudig samen met de [fields tool](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/fields){:target=\"_blank\" rel=\"noopener\"}.   # noqa: E501

        :param fields: The fields of this ZoekMetNaamEnGemeenteVanInschrijving.
        :type fields: List[str]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501
        if fields is not None and len(fields) > 130:
            raise ValueError("Invalid value for `fields`, number of items must be less than or equal to `130`")  # noqa: E501
        if fields is not None and len(fields) < 1:
            raise ValueError("Invalid value for `fields`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._fields = fields

    @property
    def gemeente_van_inschrijving(self) -> str:
        """Gets the gemeente_van_inschrijving of this ZoekMetNaamEnGemeenteVanInschrijving.

        Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.   # noqa: E501

        :return: The gemeente_van_inschrijving of this ZoekMetNaamEnGemeenteVanInschrijving.
        :rtype: str
        """
        return self._gemeente_van_inschrijving

    @gemeente_van_inschrijving.setter
    def gemeente_van_inschrijving(self, gemeente_van_inschrijving: str):
        """Sets the gemeente_van_inschrijving of this ZoekMetNaamEnGemeenteVanInschrijving.

        Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.   # noqa: E501

        :param gemeente_van_inschrijving: The gemeente_van_inschrijving of this ZoekMetNaamEnGemeenteVanInschrijving.
        :type gemeente_van_inschrijving: str
        """
        if gemeente_van_inschrijving is None:
            raise ValueError("Invalid value for `gemeente_van_inschrijving`, must not be `None`")  # noqa: E501
        if gemeente_van_inschrijving is not None and not re.search(r'^[0-9]{4}$', gemeente_van_inschrijving):  # noqa: E501
            raise ValueError(r"Invalid value for `gemeente_van_inschrijving`, must be a follow pattern or equal to `/^[0-9]{4}$/`")  # noqa: E501

        self._gemeente_van_inschrijving = gemeente_van_inschrijving

    @property
    def inclusief_overleden_personen(self) -> bool:
        """Gets the inclusief_overleden_personen of this ZoekMetNaamEnGemeenteVanInschrijving.

        Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.   # noqa: E501

        :return: The inclusief_overleden_personen of this ZoekMetNaamEnGemeenteVanInschrijving.
        :rtype: bool
        """
        return self._inclusief_overleden_personen

    @inclusief_overleden_personen.setter
    def inclusief_overleden_personen(self, inclusief_overleden_personen: bool):
        """Sets the inclusief_overleden_personen of this ZoekMetNaamEnGemeenteVanInschrijving.

        Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.   # noqa: E501

        :param inclusief_overleden_personen: The inclusief_overleden_personen of this ZoekMetNaamEnGemeenteVanInschrijving.
        :type inclusief_overleden_personen: bool
        """

        self._inclusief_overleden_personen = inclusief_overleden_personen

    @property
    def geslacht(self) -> str:
        """Gets the geslacht of this ZoekMetNaamEnGemeenteVanInschrijving.

        Geeft aan dat de persoon een man of een vrouw is, of dat het geslacht (nog) onbekend is.   # noqa: E501

        :return: The geslacht of this ZoekMetNaamEnGemeenteVanInschrijving.
        :rtype: str
        """
        return self._geslacht

    @geslacht.setter
    def geslacht(self, geslacht: str):
        """Sets the geslacht of this ZoekMetNaamEnGemeenteVanInschrijving.

        Geeft aan dat de persoon een man of een vrouw is, of dat het geslacht (nog) onbekend is.   # noqa: E501

        :param geslacht: The geslacht of this ZoekMetNaamEnGemeenteVanInschrijving.
        :type geslacht: str
        """
        if geslacht is not None and not re.search(r'^([Mm]|[Vv]|[Oo])$', geslacht):  # noqa: E501
            raise ValueError(r"Invalid value for `geslacht`, must be a follow pattern or equal to `/^([Mm]|[Vv]|[Oo])$/`")  # noqa: E501

        self._geslacht = geslacht

    @property
    def geslachtsnaam(self) -> str:
        """Gets the geslachtsnaam of this ZoekMetNaamEnGemeenteVanInschrijving.

        De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels zijn afgesplitst. **Gebruik van de wildcard is toegestaan bij invoer van ten minste 3 letters.** **Zoeken met tekstvelden is case-insensitive.**   # noqa: E501

        :return: The geslachtsnaam of this ZoekMetNaamEnGemeenteVanInschrijving.
        :rtype: str
        """
        return self._geslachtsnaam

    @geslachtsnaam.setter
    def geslachtsnaam(self, geslachtsnaam: str):
        """Sets the geslachtsnaam of this ZoekMetNaamEnGemeenteVanInschrijving.

        De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels zijn afgesplitst. **Gebruik van de wildcard is toegestaan bij invoer van ten minste 3 letters.** **Zoeken met tekstvelden is case-insensitive.**   # noqa: E501

        :param geslachtsnaam: The geslachtsnaam of this ZoekMetNaamEnGemeenteVanInschrijving.
        :type geslachtsnaam: str
        """
        if geslachtsnaam is None:
            raise ValueError("Invalid value for `geslachtsnaam`, must not be `None`")  # noqa: E501
        if geslachtsnaam is not None and not re.search(r'^[a-zA-Z0-9À-ž \.\-\']{1,200}$|^[a-zA-Z0-9À-ž \.\-\']{3,199}\*{1}$', geslachtsnaam):  # noqa: E501
            raise ValueError(r"Invalid value for `geslachtsnaam`, must be a follow pattern or equal to `/^[a-zA-Z0-9À-ž \.\-\']{1,200}$|^[a-zA-Z0-9À-ž \.\-\']{3,199}\*{1}$/`")  # noqa: E501

        self._geslachtsnaam = geslachtsnaam

    @property
    def voorvoegsel(self) -> str:
        """Gets the voorvoegsel of this ZoekMetNaamEnGemeenteVanInschrijving.

        Deel van de geslachtsnaam dat vooraf gaat aan de rest van de geslachtsnaam. **Zoeken met tekstvelden is case-insensitive.**   # noqa: E501

        :return: The voorvoegsel of this ZoekMetNaamEnGemeenteVanInschrijving.
        :rtype: str
        """
        return self._voorvoegsel

    @voorvoegsel.setter
    def voorvoegsel(self, voorvoegsel: str):
        """Sets the voorvoegsel of this ZoekMetNaamEnGemeenteVanInschrijving.

        Deel van de geslachtsnaam dat vooraf gaat aan de rest van de geslachtsnaam. **Zoeken met tekstvelden is case-insensitive.**   # noqa: E501

        :param voorvoegsel: The voorvoegsel of this ZoekMetNaamEnGemeenteVanInschrijving.
        :type voorvoegsel: str
        """
        if voorvoegsel is not None and not re.search(r'^[a-zA-Z \']{1,10}$', voorvoegsel):  # noqa: E501
            raise ValueError(r"Invalid value for `voorvoegsel`, must be a follow pattern or equal to `/^[a-zA-Z \']{1,10}$/`")  # noqa: E501

        self._voorvoegsel = voorvoegsel

    @property
    def voornamen(self) -> str:
        """Gets the voornamen of this ZoekMetNaamEnGemeenteVanInschrijving.

        De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. **Gebruik van de wildcard is toegestaan bij invoer van ten minste 3 letters.** **Zoeken met tekstvelden is case-insensitive.**   # noqa: E501

        :return: The voornamen of this ZoekMetNaamEnGemeenteVanInschrijving.
        :rtype: str
        """
        return self._voornamen

    @voornamen.setter
    def voornamen(self, voornamen: str):
        """Sets the voornamen of this ZoekMetNaamEnGemeenteVanInschrijving.

        De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. **Gebruik van de wildcard is toegestaan bij invoer van ten minste 3 letters.** **Zoeken met tekstvelden is case-insensitive.**   # noqa: E501

        :param voornamen: The voornamen of this ZoekMetNaamEnGemeenteVanInschrijving.
        :type voornamen: str
        """
        if voornamen is None:
            raise ValueError("Invalid value for `voornamen`, must not be `None`")  # noqa: E501
        if voornamen is not None and not re.search(r'^[a-zA-Z0-9À-ž \.\-\']{1,200}$|^[a-zA-Z0-9À-ž \.\-\']{3,199}\*{1}$', voornamen):  # noqa: E501
            raise ValueError(r"Invalid value for `voornamen`, must be a follow pattern or equal to `/^[a-zA-Z0-9À-ž \.\-\']{1,200}$|^[a-zA-Z0-9À-ž \.\-\']{3,199}\*{1}$/`")  # noqa: E501

        self._voornamen = voornamen
