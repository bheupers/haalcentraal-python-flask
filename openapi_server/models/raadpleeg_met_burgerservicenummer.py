from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.personen_query import PersonenQuery
import re
from openapi_server import util

from openapi_server.models.personen_query import PersonenQuery  # noqa: E501
import re  # noqa: E501

class RaadpleegMetBurgerservicenummer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, fields=None, gemeente_van_inschrijving=None, burgerservicenummer=None):  # noqa: E501
        """RaadpleegMetBurgerservicenummer - a model defined in OpenAPI

        :param type: The type of this RaadpleegMetBurgerservicenummer.  # noqa: E501
        :type type: str
        :param fields: The fields of this RaadpleegMetBurgerservicenummer.  # noqa: E501
        :type fields: List[str]
        :param gemeente_van_inschrijving: The gemeente_van_inschrijving of this RaadpleegMetBurgerservicenummer.  # noqa: E501
        :type gemeente_van_inschrijving: str
        :param burgerservicenummer: The burgerservicenummer of this RaadpleegMetBurgerservicenummer.  # noqa: E501
        :type burgerservicenummer: List[str]
        """
        self.openapi_types = {
            'type': str,
            'fields': List[str],
            'gemeente_van_inschrijving': str,
            'burgerservicenummer': List[str]
        }

        self.attribute_map = {
            'type': 'type',
            'fields': 'fields',
            'gemeente_van_inschrijving': 'gemeenteVanInschrijving',
            'burgerservicenummer': 'burgerservicenummer'
        }

        self._type = type
        self._fields = fields
        self._gemeente_van_inschrijving = gemeente_van_inschrijving
        self._burgerservicenummer = burgerservicenummer

    @classmethod
    def from_dict(cls, dikt) -> 'RaadpleegMetBurgerservicenummer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RaadpleegMetBurgerservicenummer of this RaadpleegMetBurgerservicenummer.  # noqa: E501
        :rtype: RaadpleegMetBurgerservicenummer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this RaadpleegMetBurgerservicenummer.


        :return: The type of this RaadpleegMetBurgerservicenummer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this RaadpleegMetBurgerservicenummer.


        :param type: The type of this RaadpleegMetBurgerservicenummer.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def fields(self) -> List[str]:
        """Gets the fields of this RaadpleegMetBurgerservicenummer.

        Hiermee kun je de velden opgeven die je wenst te ontvangen.  Velden die automatisch worden geleverd (inOnderzoek, geheimhoudingPersoonsgegevens, opschortingBijhouding, rni en verificatie) mag je niet opgeven in fields. Opgave van een pad dat verwijst naar een niet-bestaand veld of naar een automatisch geleverd veld leidt tot een 400 Bad Request.  Meer details over hoe fields werkt lees je in het [feature overzicht](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/features-overzicht#filteren-van-de-velden-van-de-gevonden-personen). Stel je fields eenvoudig samen met de [fields tool](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/fields){:target=\"_blank\" rel=\"noopener\"}.   # noqa: E501

        :return: The fields of this RaadpleegMetBurgerservicenummer.
        :rtype: List[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields: List[str]):
        """Sets the fields of this RaadpleegMetBurgerservicenummer.

        Hiermee kun je de velden opgeven die je wenst te ontvangen.  Velden die automatisch worden geleverd (inOnderzoek, geheimhoudingPersoonsgegevens, opschortingBijhouding, rni en verificatie) mag je niet opgeven in fields. Opgave van een pad dat verwijst naar een niet-bestaand veld of naar een automatisch geleverd veld leidt tot een 400 Bad Request.  Meer details over hoe fields werkt lees je in het [feature overzicht](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/features-overzicht#filteren-van-de-velden-van-de-gevonden-personen). Stel je fields eenvoudig samen met de [fields tool](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/fields){:target=\"_blank\" rel=\"noopener\"}.   # noqa: E501

        :param fields: The fields of this RaadpleegMetBurgerservicenummer.
        :type fields: List[str]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501
        if fields is not None and len(fields) > 130:
            raise ValueError("Invalid value for `fields`, number of items must be less than or equal to `130`")  # noqa: E501
        if fields is not None and len(fields) < 1:
            raise ValueError("Invalid value for `fields`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._fields = fields

    @property
    def gemeente_van_inschrijving(self) -> str:
        """Gets the gemeente_van_inschrijving of this RaadpleegMetBurgerservicenummer.

        Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.   # noqa: E501

        :return: The gemeente_van_inschrijving of this RaadpleegMetBurgerservicenummer.
        :rtype: str
        """
        return self._gemeente_van_inschrijving

    @gemeente_van_inschrijving.setter
    def gemeente_van_inschrijving(self, gemeente_van_inschrijving: str):
        """Sets the gemeente_van_inschrijving of this RaadpleegMetBurgerservicenummer.

        Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.   # noqa: E501

        :param gemeente_van_inschrijving: The gemeente_van_inschrijving of this RaadpleegMetBurgerservicenummer.
        :type gemeente_van_inschrijving: str
        """
        if gemeente_van_inschrijving is not None and not re.search(r'^[0-9]{4}$', gemeente_van_inschrijving):  # noqa: E501
            raise ValueError(r"Invalid value for `gemeente_van_inschrijving`, must be a follow pattern or equal to `/^[0-9]{4}$/`")  # noqa: E501

        self._gemeente_van_inschrijving = gemeente_van_inschrijving

    @property
    def burgerservicenummer(self) -> List[str]:
        """Gets the burgerservicenummer of this RaadpleegMetBurgerservicenummer.


        :return: The burgerservicenummer of this RaadpleegMetBurgerservicenummer.
        :rtype: List[str]
        """
        return self._burgerservicenummer

    @burgerservicenummer.setter
    def burgerservicenummer(self, burgerservicenummer: List[str]):
        """Sets the burgerservicenummer of this RaadpleegMetBurgerservicenummer.


        :param burgerservicenummer: The burgerservicenummer of this RaadpleegMetBurgerservicenummer.
        :type burgerservicenummer: List[str]
        """
        if burgerservicenummer is None:
            raise ValueError("Invalid value for `burgerservicenummer`, must not be `None`")  # noqa: E501
        if burgerservicenummer is not None and len(burgerservicenummer) > 20:
            raise ValueError("Invalid value for `burgerservicenummer`, number of items must be less than or equal to `20`")  # noqa: E501
        if burgerservicenummer is not None and len(burgerservicenummer) < 1:
            raise ValueError("Invalid value for `burgerservicenummer`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._burgerservicenummer = burgerservicenummer
