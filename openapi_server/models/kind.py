from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.geboorte import Geboorte
from openapi_server.models.kind_in_onderzoek import KindInOnderzoek
from openapi_server.models.naam_gerelateerde import NaamGerelateerde
import re
from openapi_server import util

from openapi_server.models.geboorte import Geboorte  # noqa: E501
from openapi_server.models.kind_in_onderzoek import KindInOnderzoek  # noqa: E501
from openapi_server.models.naam_gerelateerde import NaamGerelateerde  # noqa: E501
import re  # noqa: E501

class Kind(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, burgerservicenummer=None, in_onderzoek=None, naam=None, geboorte=None):  # noqa: E501
        """Kind - a model defined in OpenAPI

        :param burgerservicenummer: The burgerservicenummer of this Kind.  # noqa: E501
        :type burgerservicenummer: str
        :param in_onderzoek: The in_onderzoek of this Kind.  # noqa: E501
        :type in_onderzoek: KindInOnderzoek
        :param naam: The naam of this Kind.  # noqa: E501
        :type naam: NaamGerelateerde
        :param geboorte: The geboorte of this Kind.  # noqa: E501
        :type geboorte: Geboorte
        """
        self.openapi_types = {
            'burgerservicenummer': str,
            'in_onderzoek': KindInOnderzoek,
            'naam': NaamGerelateerde,
            'geboorte': Geboorte
        }

        self.attribute_map = {
            'burgerservicenummer': 'burgerservicenummer',
            'in_onderzoek': 'inOnderzoek',
            'naam': 'naam',
            'geboorte': 'geboorte'
        }

        self._burgerservicenummer = burgerservicenummer
        self._in_onderzoek = in_onderzoek
        self._naam = naam
        self._geboorte = geboorte

    @classmethod
    def from_dict(cls, dikt) -> 'Kind':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Kind of this Kind.  # noqa: E501
        :rtype: Kind
        """
        return util.deserialize_model(dikt, cls)

    @property
    def burgerservicenummer(self) -> str:
        """Gets the burgerservicenummer of this Kind.


        :return: The burgerservicenummer of this Kind.
        :rtype: str
        """
        return self._burgerservicenummer

    @burgerservicenummer.setter
    def burgerservicenummer(self, burgerservicenummer: str):
        """Sets the burgerservicenummer of this Kind.


        :param burgerservicenummer: The burgerservicenummer of this Kind.
        :type burgerservicenummer: str
        """
        if burgerservicenummer is not None and not re.search(r'^[0-9]{9}$', burgerservicenummer):  # noqa: E501
            raise ValueError(r"Invalid value for `burgerservicenummer`, must be a follow pattern or equal to `/^[0-9]{9}$/`")  # noqa: E501

        self._burgerservicenummer = burgerservicenummer

    @property
    def in_onderzoek(self) -> KindInOnderzoek:
        """Gets the in_onderzoek of this Kind.


        :return: The in_onderzoek of this Kind.
        :rtype: KindInOnderzoek
        """
        return self._in_onderzoek

    @in_onderzoek.setter
    def in_onderzoek(self, in_onderzoek: KindInOnderzoek):
        """Sets the in_onderzoek of this Kind.


        :param in_onderzoek: The in_onderzoek of this Kind.
        :type in_onderzoek: KindInOnderzoek
        """

        self._in_onderzoek = in_onderzoek

    @property
    def naam(self) -> NaamGerelateerde:
        """Gets the naam of this Kind.


        :return: The naam of this Kind.
        :rtype: NaamGerelateerde
        """
        return self._naam

    @naam.setter
    def naam(self, naam: NaamGerelateerde):
        """Sets the naam of this Kind.


        :param naam: The naam of this Kind.
        :type naam: NaamGerelateerde
        """

        self._naam = naam

    @property
    def geboorte(self) -> Geboorte:
        """Gets the geboorte of this Kind.


        :return: The geboorte of this Kind.
        :rtype: Geboorte
        """
        return self._geboorte

    @geboorte.setter
    def geboorte(self, geboorte: Geboorte):
        """Sets the geboorte of this Kind.


        :param geboorte: The geboorte of this Kind.
        :type geboorte: Geboorte
        """

        self._geboorte = geboorte
