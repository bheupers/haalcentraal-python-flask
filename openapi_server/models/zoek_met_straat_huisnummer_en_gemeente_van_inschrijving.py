from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.personen_query import PersonenQuery
import re
from openapi_server import util

from openapi_server.models.personen_query import PersonenQuery  # noqa: E501
import re  # noqa: E501

class ZoekMetStraatHuisnummerEnGemeenteVanInschrijving(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, fields=None, gemeente_van_inschrijving=None, inclusief_overleden_personen=None, huisletter=None, huisnummer=None, huisnummertoevoeging=None, straat=None):  # noqa: E501
        """ZoekMetStraatHuisnummerEnGemeenteVanInschrijving - a model defined in OpenAPI

        :param type: The type of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.  # noqa: E501
        :type type: str
        :param fields: The fields of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.  # noqa: E501
        :type fields: List[str]
        :param gemeente_van_inschrijving: The gemeente_van_inschrijving of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.  # noqa: E501
        :type gemeente_van_inschrijving: str
        :param inclusief_overleden_personen: The inclusief_overleden_personen of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.  # noqa: E501
        :type inclusief_overleden_personen: bool
        :param huisletter: The huisletter of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.  # noqa: E501
        :type huisletter: str
        :param huisnummer: The huisnummer of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.  # noqa: E501
        :type huisnummer: int
        :param huisnummertoevoeging: The huisnummertoevoeging of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.  # noqa: E501
        :type huisnummertoevoeging: str
        :param straat: The straat of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.  # noqa: E501
        :type straat: str
        """
        self.openapi_types = {
            'type': str,
            'fields': List[str],
            'gemeente_van_inschrijving': str,
            'inclusief_overleden_personen': bool,
            'huisletter': str,
            'huisnummer': int,
            'huisnummertoevoeging': str,
            'straat': str
        }

        self.attribute_map = {
            'type': 'type',
            'fields': 'fields',
            'gemeente_van_inschrijving': 'gemeenteVanInschrijving',
            'inclusief_overleden_personen': 'inclusiefOverledenPersonen',
            'huisletter': 'huisletter',
            'huisnummer': 'huisnummer',
            'huisnummertoevoeging': 'huisnummertoevoeging',
            'straat': 'straat'
        }

        self._type = type
        self._fields = fields
        self._gemeente_van_inschrijving = gemeente_van_inschrijving
        self._inclusief_overleden_personen = inclusief_overleden_personen
        self._huisletter = huisletter
        self._huisnummer = huisnummer
        self._huisnummertoevoeging = huisnummertoevoeging
        self._straat = straat

    @classmethod
    def from_dict(cls, dikt) -> 'ZoekMetStraatHuisnummerEnGemeenteVanInschrijving':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ZoekMetStraatHuisnummerEnGemeenteVanInschrijving of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.  # noqa: E501
        :rtype: ZoekMetStraatHuisnummerEnGemeenteVanInschrijving
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.


        :return: The type of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.


        :param type: The type of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def fields(self) -> List[str]:
        """Gets the fields of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.

        Hiermee kun je de velden opgeven die je wenst te ontvangen.  Velden die automatisch worden geleverd (inOnderzoek, geheimhoudingPersoonsgegevens, opschortingBijhouding, rni en verificatie) mag je niet opgeven in fields. Opgave van een pad dat verwijst naar een niet-bestaand veld of naar een automatisch geleverd veld leidt tot een 400 Bad Request.  Meer details over hoe fields werkt lees je in het [feature overzicht](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/features-overzicht#filteren-van-de-velden-van-de-gevonden-personen). Stel je fields eenvoudig samen met de [fields tool](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/fields){:target=\"_blank\" rel=\"noopener\"}.   # noqa: E501

        :return: The fields of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :rtype: List[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields: List[str]):
        """Sets the fields of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.

        Hiermee kun je de velden opgeven die je wenst te ontvangen.  Velden die automatisch worden geleverd (inOnderzoek, geheimhoudingPersoonsgegevens, opschortingBijhouding, rni en verificatie) mag je niet opgeven in fields. Opgave van een pad dat verwijst naar een niet-bestaand veld of naar een automatisch geleverd veld leidt tot een 400 Bad Request.  Meer details over hoe fields werkt lees je in het [feature overzicht](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/features-overzicht#filteren-van-de-velden-van-de-gevonden-personen). Stel je fields eenvoudig samen met de [fields tool](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/fields){:target=\"_blank\" rel=\"noopener\"}.   # noqa: E501

        :param fields: The fields of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :type fields: List[str]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501
        if fields is not None and len(fields) > 130:
            raise ValueError("Invalid value for `fields`, number of items must be less than or equal to `130`")  # noqa: E501
        if fields is not None and len(fields) < 1:
            raise ValueError("Invalid value for `fields`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._fields = fields

    @property
    def gemeente_van_inschrijving(self) -> str:
        """Gets the gemeente_van_inschrijving of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.

        Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.   # noqa: E501

        :return: The gemeente_van_inschrijving of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :rtype: str
        """
        return self._gemeente_van_inschrijving

    @gemeente_van_inschrijving.setter
    def gemeente_van_inschrijving(self, gemeente_van_inschrijving: str):
        """Sets the gemeente_van_inschrijving of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.

        Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.   # noqa: E501

        :param gemeente_van_inschrijving: The gemeente_van_inschrijving of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :type gemeente_van_inschrijving: str
        """
        if gemeente_van_inschrijving is None:
            raise ValueError("Invalid value for `gemeente_van_inschrijving`, must not be `None`")  # noqa: E501
        if gemeente_van_inschrijving is not None and not re.search(r'^[0-9]{4}$', gemeente_van_inschrijving):  # noqa: E501
            raise ValueError(r"Invalid value for `gemeente_van_inschrijving`, must be a follow pattern or equal to `/^[0-9]{4}$/`")  # noqa: E501

        self._gemeente_van_inschrijving = gemeente_van_inschrijving

    @property
    def inclusief_overleden_personen(self) -> bool:
        """Gets the inclusief_overleden_personen of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.

        Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.   # noqa: E501

        :return: The inclusief_overleden_personen of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :rtype: bool
        """
        return self._inclusief_overleden_personen

    @inclusief_overleden_personen.setter
    def inclusief_overleden_personen(self, inclusief_overleden_personen: bool):
        """Sets the inclusief_overleden_personen of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.

        Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.   # noqa: E501

        :param inclusief_overleden_personen: The inclusief_overleden_personen of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :type inclusief_overleden_personen: bool
        """

        self._inclusief_overleden_personen = inclusief_overleden_personen

    @property
    def huisletter(self) -> str:
        """Gets the huisletter of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.

        Een toevoeging aan een huisnummer in de vorm van een letter die door de gemeente aan een adresseerbaar object is gegeven.   # noqa: E501

        :return: The huisletter of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :rtype: str
        """
        return self._huisletter

    @huisletter.setter
    def huisletter(self, huisletter: str):
        """Sets the huisletter of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.

        Een toevoeging aan een huisnummer in de vorm van een letter die door de gemeente aan een adresseerbaar object is gegeven.   # noqa: E501

        :param huisletter: The huisletter of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :type huisletter: str
        """
        if huisletter is not None and not re.search(r'^[a-zA-Z]{1}$', huisletter):  # noqa: E501
            raise ValueError(r"Invalid value for `huisletter`, must be a follow pattern or equal to `/^[a-zA-Z]{1}$/`")  # noqa: E501

        self._huisletter = huisletter

    @property
    def huisnummer(self) -> int:
        """Gets the huisnummer of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.

        Een nummer dat door de gemeente aan een adresseerbaar object is gegeven.   # noqa: E501

        :return: The huisnummer of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :rtype: int
        """
        return self._huisnummer

    @huisnummer.setter
    def huisnummer(self, huisnummer: int):
        """Sets the huisnummer of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.

        Een nummer dat door de gemeente aan een adresseerbaar object is gegeven.   # noqa: E501

        :param huisnummer: The huisnummer of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :type huisnummer: int
        """
        if huisnummer is None:
            raise ValueError("Invalid value for `huisnummer`, must not be `None`")  # noqa: E501
        if huisnummer is not None and huisnummer > 99999:  # noqa: E501
            raise ValueError("Invalid value for `huisnummer`, must be a value less than or equal to `99999`")  # noqa: E501
        if huisnummer is not None and huisnummer < 1:  # noqa: E501
            raise ValueError("Invalid value for `huisnummer`, must be a value greater than or equal to `1`")  # noqa: E501

        self._huisnummer = huisnummer

    @property
    def huisnummertoevoeging(self) -> str:
        """Gets the huisnummertoevoeging of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.

        Een toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter die door de gemeente aan een adresseerbaar object is gegeven.   # noqa: E501

        :return: The huisnummertoevoeging of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :rtype: str
        """
        return self._huisnummertoevoeging

    @huisnummertoevoeging.setter
    def huisnummertoevoeging(self, huisnummertoevoeging: str):
        """Sets the huisnummertoevoeging of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.

        Een toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter die door de gemeente aan een adresseerbaar object is gegeven.   # noqa: E501

        :param huisnummertoevoeging: The huisnummertoevoeging of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :type huisnummertoevoeging: str
        """
        if huisnummertoevoeging is not None and not re.search(r'^[a-zA-Z0-9 \-]{1,4}$', huisnummertoevoeging):  # noqa: E501
            raise ValueError(r"Invalid value for `huisnummertoevoeging`, must be a follow pattern or equal to `/^[a-zA-Z0-9 \-]{1,4}$/`")  # noqa: E501

        self._huisnummertoevoeging = huisnummertoevoeging

    @property
    def straat(self) -> str:
        """Gets the straat of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.

        Een naam die door de gemeente aan een openbare ruimte is gegeven. **Gebruik van de wildcard is toegestaan bij invoer van ten minste 7 letters.** **Zoeken met tekstvelden is case-insensitive.**    # noqa: E501

        :return: The straat of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :rtype: str
        """
        return self._straat

    @straat.setter
    def straat(self, straat: str):
        """Sets the straat of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.

        Een naam die door de gemeente aan een openbare ruimte is gegeven. **Gebruik van de wildcard is toegestaan bij invoer van ten minste 7 letters.** **Zoeken met tekstvelden is case-insensitive.**    # noqa: E501

        :param straat: The straat of this ZoekMetStraatHuisnummerEnGemeenteVanInschrijving.
        :type straat: str
        """
        if straat is None:
            raise ValueError("Invalid value for `straat`, must not be `None`")  # noqa: E501
        if straat is not None and not re.search(r'^[a-zA-Z0-9À-ž \-\'\.]{1,80}$|^[a-zA-Z0-9À-ž \-\'\.]{7,79}\*{1}$|^\*{1}[a-zA-Z0-9À-ž \-\'\.]{7,79}$', straat):  # noqa: E501
            raise ValueError(r"Invalid value for `straat`, must be a follow pattern or equal to `/^[a-zA-Z0-9À-ž \-\'\.]{1,80}$|^[a-zA-Z0-9À-ž \-\'\.]{7,79}\*{1}$|^\*{1}[a-zA-Z0-9À-ž \-\'\.]{7,79}$/`")  # noqa: E501

        self._straat = straat
