from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
import re
from openapi_server import util

import re  # noqa: E501

class Aanschrijfwijze(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, naam=None, aanspreekvorm=None):  # noqa: E501
        """Aanschrijfwijze - a model defined in OpenAPI

        :param naam: The naam of this Aanschrijfwijze.  # noqa: E501
        :type naam: str
        :param aanspreekvorm: The aanspreekvorm of this Aanschrijfwijze.  # noqa: E501
        :type aanspreekvorm: str
        """
        self.openapi_types = {
            'naam': str,
            'aanspreekvorm': str
        }

        self.attribute_map = {
            'naam': 'naam',
            'aanspreekvorm': 'aanspreekvorm'
        }

        self._naam = naam
        self._aanspreekvorm = aanspreekvorm

    @classmethod
    def from_dict(cls, dikt) -> 'Aanschrijfwijze':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Aanschrijfwijze of this Aanschrijfwijze.  # noqa: E501
        :rtype: Aanschrijfwijze
        """
        return util.deserialize_model(dikt, cls)

    @property
    def naam(self) -> str:
        """Gets the naam of this Aanschrijfwijze.


        :return: The naam of this Aanschrijfwijze.
        :rtype: str
        """
        return self._naam

    @naam.setter
    def naam(self, naam: str):
        """Sets the naam of this Aanschrijfwijze.


        :param naam: The naam of this Aanschrijfwijze.
        :type naam: str
        """
        if naam is not None and not re.search(r'^[a-zA-Z0-9À-ž \.\-\']{1,650}$', naam):  # noqa: E501
            raise ValueError(r"Invalid value for `naam`, must be a follow pattern or equal to `/^[a-zA-Z0-9À-ž \.\-\']{1,650}$/`")  # noqa: E501

        self._naam = naam

    @property
    def aanspreekvorm(self) -> str:
        """Gets the aanspreekvorm of this Aanschrijfwijze.

        Deze regel moet als aparte regel boven de samengestelde naam worden geplaatst. Komt alleen voor bij personen met een adellijke titel of predicaat.   # noqa: E501

        :return: The aanspreekvorm of this Aanschrijfwijze.
        :rtype: str
        """
        return self._aanspreekvorm

    @aanspreekvorm.setter
    def aanspreekvorm(self, aanspreekvorm: str):
        """Sets the aanspreekvorm of this Aanschrijfwijze.

        Deze regel moet als aparte regel boven de samengestelde naam worden geplaatst. Komt alleen voor bij personen met een adellijke titel of predicaat.   # noqa: E501

        :param aanspreekvorm: The aanspreekvorm of this Aanschrijfwijze.
        :type aanspreekvorm: str
        """
        if aanspreekvorm is not None and not re.search(r'^[a-zA-Z ]{1,25}$', aanspreekvorm):  # noqa: E501
            raise ValueError(r"Invalid value for `aanspreekvorm`, must be a follow pattern or equal to `/^[a-zA-Z ]{1,25}$/`")  # noqa: E501

        self._aanspreekvorm = aanspreekvorm
