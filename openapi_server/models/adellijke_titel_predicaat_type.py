from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.adellijke_titel_predicaat_soort import AdellijkeTitelPredicaatSoort
import re
from openapi_server import util

from openapi_server.models.adellijke_titel_predicaat_soort import AdellijkeTitelPredicaatSoort  # noqa: E501
import re  # noqa: E501

class AdellijkeTitelPredicaatType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code=None, omschrijving=None, soort=None):  # noqa: E501
        """AdellijkeTitelPredicaatType - a model defined in OpenAPI

        :param code: The code of this AdellijkeTitelPredicaatType.  # noqa: E501
        :type code: str
        :param omschrijving: The omschrijving of this AdellijkeTitelPredicaatType.  # noqa: E501
        :type omschrijving: str
        :param soort: The soort of this AdellijkeTitelPredicaatType.  # noqa: E501
        :type soort: AdellijkeTitelPredicaatSoort
        """
        self.openapi_types = {
            'code': str,
            'omschrijving': str,
            'soort': AdellijkeTitelPredicaatSoort
        }

        self.attribute_map = {
            'code': 'code',
            'omschrijving': 'omschrijving',
            'soort': 'soort'
        }

        self._code = code
        self._omschrijving = omschrijving
        self._soort = soort

    @classmethod
    def from_dict(cls, dikt) -> 'AdellijkeTitelPredicaatType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdellijkeTitelPredicaatType of this AdellijkeTitelPredicaatType.  # noqa: E501
        :rtype: AdellijkeTitelPredicaatType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self) -> str:
        """Gets the code of this AdellijkeTitelPredicaatType.


        :return: The code of this AdellijkeTitelPredicaatType.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this AdellijkeTitelPredicaatType.


        :param code: The code of this AdellijkeTitelPredicaatType.
        :type code: str
        """
        if code is not None and not re.search(r'^[a-zA-Z0-9 \.]+$', code):  # noqa: E501
            raise ValueError(r"Invalid value for `code`, must be a follow pattern or equal to `/^[a-zA-Z0-9 \.]+$/`")  # noqa: E501

        self._code = code

    @property
    def omschrijving(self) -> str:
        """Gets the omschrijving of this AdellijkeTitelPredicaatType.


        :return: The omschrijving of this AdellijkeTitelPredicaatType.
        :rtype: str
        """
        return self._omschrijving

    @omschrijving.setter
    def omschrijving(self, omschrijving: str):
        """Sets the omschrijving of this AdellijkeTitelPredicaatType.


        :param omschrijving: The omschrijving of this AdellijkeTitelPredicaatType.
        :type omschrijving: str
        """
        if omschrijving is not None and not re.search(r'^[a-zA-Z0-9À-ž \'\,\(\)\.\-]{1,200}$', omschrijving):  # noqa: E501
            raise ValueError(r"Invalid value for `omschrijving`, must be a follow pattern or equal to `/^[a-zA-Z0-9À-ž \'\,\(\)\.\-]{1,200}$/`")  # noqa: E501

        self._omschrijving = omschrijving

    @property
    def soort(self) -> AdellijkeTitelPredicaatSoort:
        """Gets the soort of this AdellijkeTitelPredicaatType.


        :return: The soort of this AdellijkeTitelPredicaatType.
        :rtype: AdellijkeTitelPredicaatSoort
        """
        return self._soort

    @soort.setter
    def soort(self, soort: AdellijkeTitelPredicaatSoort):
        """Sets the soort of this AdellijkeTitelPredicaatType.


        :param soort: The soort of this AdellijkeTitelPredicaatType.
        :type soort: AdellijkeTitelPredicaatSoort
        """

        self._soort = soort
