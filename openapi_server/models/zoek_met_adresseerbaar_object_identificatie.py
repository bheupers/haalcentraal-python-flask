from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.personen_query import PersonenQuery
import re
from openapi_server import util

from openapi_server.models.personen_query import PersonenQuery  # noqa: E501
import re  # noqa: E501

class ZoekMetAdresseerbaarObjectIdentificatie(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, fields=None, gemeente_van_inschrijving=None, inclusief_overleden_personen=None, adresseerbaar_object_identificatie=None):  # noqa: E501
        """ZoekMetAdresseerbaarObjectIdentificatie - a model defined in OpenAPI

        :param type: The type of this ZoekMetAdresseerbaarObjectIdentificatie.  # noqa: E501
        :type type: str
        :param fields: The fields of this ZoekMetAdresseerbaarObjectIdentificatie.  # noqa: E501
        :type fields: List[str]
        :param gemeente_van_inschrijving: The gemeente_van_inschrijving of this ZoekMetAdresseerbaarObjectIdentificatie.  # noqa: E501
        :type gemeente_van_inschrijving: str
        :param inclusief_overleden_personen: The inclusief_overleden_personen of this ZoekMetAdresseerbaarObjectIdentificatie.  # noqa: E501
        :type inclusief_overleden_personen: bool
        :param adresseerbaar_object_identificatie: The adresseerbaar_object_identificatie of this ZoekMetAdresseerbaarObjectIdentificatie.  # noqa: E501
        :type adresseerbaar_object_identificatie: str
        """
        self.openapi_types = {
            'type': str,
            'fields': List[str],
            'gemeente_van_inschrijving': str,
            'inclusief_overleden_personen': bool,
            'adresseerbaar_object_identificatie': str
        }

        self.attribute_map = {
            'type': 'type',
            'fields': 'fields',
            'gemeente_van_inschrijving': 'gemeenteVanInschrijving',
            'inclusief_overleden_personen': 'inclusiefOverledenPersonen',
            'adresseerbaar_object_identificatie': 'adresseerbaarObjectIdentificatie'
        }

        self._type = type
        self._fields = fields
        self._gemeente_van_inschrijving = gemeente_van_inschrijving
        self._inclusief_overleden_personen = inclusief_overleden_personen
        self._adresseerbaar_object_identificatie = adresseerbaar_object_identificatie

    @classmethod
    def from_dict(cls, dikt) -> 'ZoekMetAdresseerbaarObjectIdentificatie':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ZoekMetAdresseerbaarObjectIdentificatie of this ZoekMetAdresseerbaarObjectIdentificatie.  # noqa: E501
        :rtype: ZoekMetAdresseerbaarObjectIdentificatie
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this ZoekMetAdresseerbaarObjectIdentificatie.


        :return: The type of this ZoekMetAdresseerbaarObjectIdentificatie.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ZoekMetAdresseerbaarObjectIdentificatie.


        :param type: The type of this ZoekMetAdresseerbaarObjectIdentificatie.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def fields(self) -> List[str]:
        """Gets the fields of this ZoekMetAdresseerbaarObjectIdentificatie.

        Hiermee kun je de velden opgeven die je wenst te ontvangen.  Velden die automatisch worden geleverd (inOnderzoek, geheimhoudingPersoonsgegevens, opschortingBijhouding, rni en verificatie) mag je niet opgeven in fields. Opgave van een pad dat verwijst naar een niet-bestaand veld of naar een automatisch geleverd veld leidt tot een 400 Bad Request.  Meer details over hoe fields werkt lees je in het [feature overzicht](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/features-overzicht#filteren-van-de-velden-van-de-gevonden-personen). Stel je fields eenvoudig samen met de [fields tool](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/fields){:target=\"_blank\" rel=\"noopener\"}.   # noqa: E501

        :return: The fields of this ZoekMetAdresseerbaarObjectIdentificatie.
        :rtype: List[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields: List[str]):
        """Sets the fields of this ZoekMetAdresseerbaarObjectIdentificatie.

        Hiermee kun je de velden opgeven die je wenst te ontvangen.  Velden die automatisch worden geleverd (inOnderzoek, geheimhoudingPersoonsgegevens, opschortingBijhouding, rni en verificatie) mag je niet opgeven in fields. Opgave van een pad dat verwijst naar een niet-bestaand veld of naar een automatisch geleverd veld leidt tot een 400 Bad Request.  Meer details over hoe fields werkt lees je in het [feature overzicht](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/features-overzicht#filteren-van-de-velden-van-de-gevonden-personen). Stel je fields eenvoudig samen met de [fields tool](https://brp-api.github.io/Haal-Centraal-BRP-bevragen/v2/fields){:target=\"_blank\" rel=\"noopener\"}.   # noqa: E501

        :param fields: The fields of this ZoekMetAdresseerbaarObjectIdentificatie.
        :type fields: List[str]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501
        if fields is not None and len(fields) > 130:
            raise ValueError("Invalid value for `fields`, number of items must be less than or equal to `130`")  # noqa: E501
        if fields is not None and len(fields) < 1:
            raise ValueError("Invalid value for `fields`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._fields = fields

    @property
    def gemeente_van_inschrijving(self) -> str:
        """Gets the gemeente_van_inschrijving of this ZoekMetAdresseerbaarObjectIdentificatie.

        Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.   # noqa: E501

        :return: The gemeente_van_inschrijving of this ZoekMetAdresseerbaarObjectIdentificatie.
        :rtype: str
        """
        return self._gemeente_van_inschrijving

    @gemeente_van_inschrijving.setter
    def gemeente_van_inschrijving(self, gemeente_van_inschrijving: str):
        """Sets the gemeente_van_inschrijving of this ZoekMetAdresseerbaarObjectIdentificatie.

        Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.   # noqa: E501

        :param gemeente_van_inschrijving: The gemeente_van_inschrijving of this ZoekMetAdresseerbaarObjectIdentificatie.
        :type gemeente_van_inschrijving: str
        """
        if gemeente_van_inschrijving is not None and not re.search(r'^[0-9]{4}$', gemeente_van_inschrijving):  # noqa: E501
            raise ValueError(r"Invalid value for `gemeente_van_inschrijving`, must be a follow pattern or equal to `/^[0-9]{4}$/`")  # noqa: E501

        self._gemeente_van_inschrijving = gemeente_van_inschrijving

    @property
    def inclusief_overleden_personen(self) -> bool:
        """Gets the inclusief_overleden_personen of this ZoekMetAdresseerbaarObjectIdentificatie.

        Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.   # noqa: E501

        :return: The inclusief_overleden_personen of this ZoekMetAdresseerbaarObjectIdentificatie.
        :rtype: bool
        """
        return self._inclusief_overleden_personen

    @inclusief_overleden_personen.setter
    def inclusief_overleden_personen(self, inclusief_overleden_personen: bool):
        """Sets the inclusief_overleden_personen of this ZoekMetAdresseerbaarObjectIdentificatie.

        Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.   # noqa: E501

        :param inclusief_overleden_personen: The inclusief_overleden_personen of this ZoekMetAdresseerbaarObjectIdentificatie.
        :type inclusief_overleden_personen: bool
        """

        self._inclusief_overleden_personen = inclusief_overleden_personen

    @property
    def adresseerbaar_object_identificatie(self) -> str:
        """Gets the adresseerbaar_object_identificatie of this ZoekMetAdresseerbaarObjectIdentificatie.

        De verblijfplaats van de persoon kan een ligplaats, een standplaats of een verblijfsobject zijn.   # noqa: E501

        :return: The adresseerbaar_object_identificatie of this ZoekMetAdresseerbaarObjectIdentificatie.
        :rtype: str
        """
        return self._adresseerbaar_object_identificatie

    @adresseerbaar_object_identificatie.setter
    def adresseerbaar_object_identificatie(self, adresseerbaar_object_identificatie: str):
        """Sets the adresseerbaar_object_identificatie of this ZoekMetAdresseerbaarObjectIdentificatie.

        De verblijfplaats van de persoon kan een ligplaats, een standplaats of een verblijfsobject zijn.   # noqa: E501

        :param adresseerbaar_object_identificatie: The adresseerbaar_object_identificatie of this ZoekMetAdresseerbaarObjectIdentificatie.
        :type adresseerbaar_object_identificatie: str
        """
        if adresseerbaar_object_identificatie is None:
            raise ValueError("Invalid value for `adresseerbaar_object_identificatie`, must not be `None`")  # noqa: E501
        if adresseerbaar_object_identificatie is not None and not re.search(r'^[0-9]{16}$', adresseerbaar_object_identificatie):  # noqa: E501
            raise ValueError(r"Invalid value for `adresseerbaar_object_identificatie`, must be a follow pattern or equal to `/^[0-9]{16}$/`")  # noqa: E501

        self._adresseerbaar_object_identificatie = adresseerbaar_object_identificatie
