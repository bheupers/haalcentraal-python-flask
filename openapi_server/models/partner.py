from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.aangaan_huwelijk_partnerschap import AangaanHuwelijkPartnerschap
from openapi_server.models.geboorte import Geboorte
from openapi_server.models.naam_gerelateerde import NaamGerelateerde
from openapi_server.models.ontbinding_huwelijk_partnerschap import OntbindingHuwelijkPartnerschap
from openapi_server.models.partner_in_onderzoek import PartnerInOnderzoek
from openapi_server.models.waardetabel import Waardetabel
import re
from openapi_server import util

from openapi_server.models.aangaan_huwelijk_partnerschap import AangaanHuwelijkPartnerschap  # noqa: E501
from openapi_server.models.geboorte import Geboorte  # noqa: E501
from openapi_server.models.naam_gerelateerde import NaamGerelateerde  # noqa: E501
from openapi_server.models.ontbinding_huwelijk_partnerschap import OntbindingHuwelijkPartnerschap  # noqa: E501
from openapi_server.models.partner_in_onderzoek import PartnerInOnderzoek  # noqa: E501
from openapi_server.models.waardetabel import Waardetabel  # noqa: E501
import re  # noqa: E501

class Partner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, burgerservicenummer=None, geslacht=None, soort_verbintenis=None, naam=None, geboorte=None, in_onderzoek=None, aangaan_huwelijk_partnerschap=None, ontbinding_huwelijk_partnerschap=None):  # noqa: E501
        """Partner - a model defined in OpenAPI

        :param burgerservicenummer: The burgerservicenummer of this Partner.  # noqa: E501
        :type burgerservicenummer: str
        :param geslacht: The geslacht of this Partner.  # noqa: E501
        :type geslacht: Waardetabel
        :param soort_verbintenis: The soort_verbintenis of this Partner.  # noqa: E501
        :type soort_verbintenis: Waardetabel
        :param naam: The naam of this Partner.  # noqa: E501
        :type naam: NaamGerelateerde
        :param geboorte: The geboorte of this Partner.  # noqa: E501
        :type geboorte: Geboorte
        :param in_onderzoek: The in_onderzoek of this Partner.  # noqa: E501
        :type in_onderzoek: PartnerInOnderzoek
        :param aangaan_huwelijk_partnerschap: The aangaan_huwelijk_partnerschap of this Partner.  # noqa: E501
        :type aangaan_huwelijk_partnerschap: AangaanHuwelijkPartnerschap
        :param ontbinding_huwelijk_partnerschap: The ontbinding_huwelijk_partnerschap of this Partner.  # noqa: E501
        :type ontbinding_huwelijk_partnerschap: OntbindingHuwelijkPartnerschap
        """
        self.openapi_types = {
            'burgerservicenummer': str,
            'geslacht': Waardetabel,
            'soort_verbintenis': Waardetabel,
            'naam': NaamGerelateerde,
            'geboorte': Geboorte,
            'in_onderzoek': PartnerInOnderzoek,
            'aangaan_huwelijk_partnerschap': AangaanHuwelijkPartnerschap,
            'ontbinding_huwelijk_partnerschap': OntbindingHuwelijkPartnerschap
        }

        self.attribute_map = {
            'burgerservicenummer': 'burgerservicenummer',
            'geslacht': 'geslacht',
            'soort_verbintenis': 'soortVerbintenis',
            'naam': 'naam',
            'geboorte': 'geboorte',
            'in_onderzoek': 'inOnderzoek',
            'aangaan_huwelijk_partnerschap': 'aangaanHuwelijkPartnerschap',
            'ontbinding_huwelijk_partnerschap': 'ontbindingHuwelijkPartnerschap'
        }

        self._burgerservicenummer = burgerservicenummer
        self._geslacht = geslacht
        self._soort_verbintenis = soort_verbintenis
        self._naam = naam
        self._geboorte = geboorte
        self._in_onderzoek = in_onderzoek
        self._aangaan_huwelijk_partnerschap = aangaan_huwelijk_partnerschap
        self._ontbinding_huwelijk_partnerschap = ontbinding_huwelijk_partnerschap

    @classmethod
    def from_dict(cls, dikt) -> 'Partner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Partner of this Partner.  # noqa: E501
        :rtype: Partner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def burgerservicenummer(self) -> str:
        """Gets the burgerservicenummer of this Partner.


        :return: The burgerservicenummer of this Partner.
        :rtype: str
        """
        return self._burgerservicenummer

    @burgerservicenummer.setter
    def burgerservicenummer(self, burgerservicenummer: str):
        """Sets the burgerservicenummer of this Partner.


        :param burgerservicenummer: The burgerservicenummer of this Partner.
        :type burgerservicenummer: str
        """
        if burgerservicenummer is not None and not re.search(r'^[0-9]{9}$', burgerservicenummer):  # noqa: E501
            raise ValueError(r"Invalid value for `burgerservicenummer`, must be a follow pattern or equal to `/^[0-9]{9}$/`")  # noqa: E501

        self._burgerservicenummer = burgerservicenummer

    @property
    def geslacht(self) -> Waardetabel:
        """Gets the geslacht of this Partner.


        :return: The geslacht of this Partner.
        :rtype: Waardetabel
        """
        return self._geslacht

    @geslacht.setter
    def geslacht(self, geslacht: Waardetabel):
        """Sets the geslacht of this Partner.


        :param geslacht: The geslacht of this Partner.
        :type geslacht: Waardetabel
        """

        self._geslacht = geslacht

    @property
    def soort_verbintenis(self) -> Waardetabel:
        """Gets the soort_verbintenis of this Partner.


        :return: The soort_verbintenis of this Partner.
        :rtype: Waardetabel
        """
        return self._soort_verbintenis

    @soort_verbintenis.setter
    def soort_verbintenis(self, soort_verbintenis: Waardetabel):
        """Sets the soort_verbintenis of this Partner.


        :param soort_verbintenis: The soort_verbintenis of this Partner.
        :type soort_verbintenis: Waardetabel
        """

        self._soort_verbintenis = soort_verbintenis

    @property
    def naam(self) -> NaamGerelateerde:
        """Gets the naam of this Partner.


        :return: The naam of this Partner.
        :rtype: NaamGerelateerde
        """
        return self._naam

    @naam.setter
    def naam(self, naam: NaamGerelateerde):
        """Sets the naam of this Partner.


        :param naam: The naam of this Partner.
        :type naam: NaamGerelateerde
        """

        self._naam = naam

    @property
    def geboorte(self) -> Geboorte:
        """Gets the geboorte of this Partner.


        :return: The geboorte of this Partner.
        :rtype: Geboorte
        """
        return self._geboorte

    @geboorte.setter
    def geboorte(self, geboorte: Geboorte):
        """Sets the geboorte of this Partner.


        :param geboorte: The geboorte of this Partner.
        :type geboorte: Geboorte
        """

        self._geboorte = geboorte

    @property
    def in_onderzoek(self) -> PartnerInOnderzoek:
        """Gets the in_onderzoek of this Partner.


        :return: The in_onderzoek of this Partner.
        :rtype: PartnerInOnderzoek
        """
        return self._in_onderzoek

    @in_onderzoek.setter
    def in_onderzoek(self, in_onderzoek: PartnerInOnderzoek):
        """Sets the in_onderzoek of this Partner.


        :param in_onderzoek: The in_onderzoek of this Partner.
        :type in_onderzoek: PartnerInOnderzoek
        """

        self._in_onderzoek = in_onderzoek

    @property
    def aangaan_huwelijk_partnerschap(self) -> AangaanHuwelijkPartnerschap:
        """Gets the aangaan_huwelijk_partnerschap of this Partner.


        :return: The aangaan_huwelijk_partnerschap of this Partner.
        :rtype: AangaanHuwelijkPartnerschap
        """
        return self._aangaan_huwelijk_partnerschap

    @aangaan_huwelijk_partnerschap.setter
    def aangaan_huwelijk_partnerschap(self, aangaan_huwelijk_partnerschap: AangaanHuwelijkPartnerschap):
        """Sets the aangaan_huwelijk_partnerschap of this Partner.


        :param aangaan_huwelijk_partnerschap: The aangaan_huwelijk_partnerschap of this Partner.
        :type aangaan_huwelijk_partnerschap: AangaanHuwelijkPartnerschap
        """

        self._aangaan_huwelijk_partnerschap = aangaan_huwelijk_partnerschap

    @property
    def ontbinding_huwelijk_partnerschap(self) -> OntbindingHuwelijkPartnerschap:
        """Gets the ontbinding_huwelijk_partnerschap of this Partner.


        :return: The ontbinding_huwelijk_partnerschap of this Partner.
        :rtype: OntbindingHuwelijkPartnerschap
        """
        return self._ontbinding_huwelijk_partnerschap

    @ontbinding_huwelijk_partnerschap.setter
    def ontbinding_huwelijk_partnerschap(self, ontbinding_huwelijk_partnerschap: OntbindingHuwelijkPartnerschap):
        """Sets the ontbinding_huwelijk_partnerschap of this Partner.


        :param ontbinding_huwelijk_partnerschap: The ontbinding_huwelijk_partnerschap of this Partner.
        :type ontbinding_huwelijk_partnerschap: OntbindingHuwelijkPartnerschap
        """

        self._ontbinding_huwelijk_partnerschap = ontbinding_huwelijk_partnerschap
