from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.adellijke_titel_predicaat_type import AdellijkeTitelPredicaatType
from openapi_server.models.naam_in_onderzoek import NaamInOnderzoek
import re
from openapi_server import util

from openapi_server.models.adellijke_titel_predicaat_type import AdellijkeTitelPredicaatType  # noqa: E501
from openapi_server.models.naam_in_onderzoek import NaamInOnderzoek  # noqa: E501
import re  # noqa: E501

class NaamGerelateerde(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, voornamen=None, adellijke_titel_predicaat=None, voorvoegsel=None, geslachtsnaam=None, voorletters=None, in_onderzoek=None):  # noqa: E501
        """NaamGerelateerde - a model defined in OpenAPI

        :param voornamen: The voornamen of this NaamGerelateerde.  # noqa: E501
        :type voornamen: str
        :param adellijke_titel_predicaat: The adellijke_titel_predicaat of this NaamGerelateerde.  # noqa: E501
        :type adellijke_titel_predicaat: AdellijkeTitelPredicaatType
        :param voorvoegsel: The voorvoegsel of this NaamGerelateerde.  # noqa: E501
        :type voorvoegsel: str
        :param geslachtsnaam: The geslachtsnaam of this NaamGerelateerde.  # noqa: E501
        :type geslachtsnaam: str
        :param voorletters: The voorletters of this NaamGerelateerde.  # noqa: E501
        :type voorletters: str
        :param in_onderzoek: The in_onderzoek of this NaamGerelateerde.  # noqa: E501
        :type in_onderzoek: NaamInOnderzoek
        """
        self.openapi_types = {
            'voornamen': str,
            'adellijke_titel_predicaat': AdellijkeTitelPredicaatType,
            'voorvoegsel': str,
            'geslachtsnaam': str,
            'voorletters': str,
            'in_onderzoek': NaamInOnderzoek
        }

        self.attribute_map = {
            'voornamen': 'voornamen',
            'adellijke_titel_predicaat': 'adellijkeTitelPredicaat',
            'voorvoegsel': 'voorvoegsel',
            'geslachtsnaam': 'geslachtsnaam',
            'voorletters': 'voorletters',
            'in_onderzoek': 'inOnderzoek'
        }

        self._voornamen = voornamen
        self._adellijke_titel_predicaat = adellijke_titel_predicaat
        self._voorvoegsel = voorvoegsel
        self._geslachtsnaam = geslachtsnaam
        self._voorletters = voorletters
        self._in_onderzoek = in_onderzoek

    @classmethod
    def from_dict(cls, dikt) -> 'NaamGerelateerde':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NaamGerelateerde of this NaamGerelateerde.  # noqa: E501
        :rtype: NaamGerelateerde
        """
        return util.deserialize_model(dikt, cls)

    @property
    def voornamen(self) -> str:
        """Gets the voornamen of this NaamGerelateerde.

        De verzameling namen voor de geslachtsnaam, gescheiden door spaties.   # noqa: E501

        :return: The voornamen of this NaamGerelateerde.
        :rtype: str
        """
        return self._voornamen

    @voornamen.setter
    def voornamen(self, voornamen: str):
        """Sets the voornamen of this NaamGerelateerde.

        De verzameling namen voor de geslachtsnaam, gescheiden door spaties.   # noqa: E501

        :param voornamen: The voornamen of this NaamGerelateerde.
        :type voornamen: str
        """
        if voornamen is not None and len(voornamen) > 200:
            raise ValueError("Invalid value for `voornamen`, length must be less than or equal to `200`")  # noqa: E501
        if voornamen is not None and not re.search(r'^[a-zA-Z0-9À-ž \.\-\']{1,200}$', voornamen):  # noqa: E501
            raise ValueError(r"Invalid value for `voornamen`, must be a follow pattern or equal to `/^[a-zA-Z0-9À-ž \.\-\']{1,200}$/`")  # noqa: E501

        self._voornamen = voornamen

    @property
    def adellijke_titel_predicaat(self) -> AdellijkeTitelPredicaatType:
        """Gets the adellijke_titel_predicaat of this NaamGerelateerde.


        :return: The adellijke_titel_predicaat of this NaamGerelateerde.
        :rtype: AdellijkeTitelPredicaatType
        """
        return self._adellijke_titel_predicaat

    @adellijke_titel_predicaat.setter
    def adellijke_titel_predicaat(self, adellijke_titel_predicaat: AdellijkeTitelPredicaatType):
        """Sets the adellijke_titel_predicaat of this NaamGerelateerde.


        :param adellijke_titel_predicaat: The adellijke_titel_predicaat of this NaamGerelateerde.
        :type adellijke_titel_predicaat: AdellijkeTitelPredicaatType
        """

        self._adellijke_titel_predicaat = adellijke_titel_predicaat

    @property
    def voorvoegsel(self) -> str:
        """Gets the voorvoegsel of this NaamGerelateerde.


        :return: The voorvoegsel of this NaamGerelateerde.
        :rtype: str
        """
        return self._voorvoegsel

    @voorvoegsel.setter
    def voorvoegsel(self, voorvoegsel: str):
        """Sets the voorvoegsel of this NaamGerelateerde.


        :param voorvoegsel: The voorvoegsel of this NaamGerelateerde.
        :type voorvoegsel: str
        """
        if voorvoegsel is not None and len(voorvoegsel) > 10:
            raise ValueError("Invalid value for `voorvoegsel`, length must be less than or equal to `10`")  # noqa: E501
        if voorvoegsel is not None and not re.search(r'^[a-zA-Z \']{1,10}$', voorvoegsel):  # noqa: E501
            raise ValueError(r"Invalid value for `voorvoegsel`, must be a follow pattern or equal to `/^[a-zA-Z \']{1,10}$/`")  # noqa: E501

        self._voorvoegsel = voorvoegsel

    @property
    def geslachtsnaam(self) -> str:
        """Gets the geslachtsnaam of this NaamGerelateerde.

        De achternaam van een persoon.   # noqa: E501

        :return: The geslachtsnaam of this NaamGerelateerde.
        :rtype: str
        """
        return self._geslachtsnaam

    @geslachtsnaam.setter
    def geslachtsnaam(self, geslachtsnaam: str):
        """Sets the geslachtsnaam of this NaamGerelateerde.

        De achternaam van een persoon.   # noqa: E501

        :param geslachtsnaam: The geslachtsnaam of this NaamGerelateerde.
        :type geslachtsnaam: str
        """
        if geslachtsnaam is not None and not re.search(r'^[a-zA-Z0-9À-ž \.\-\']{1,200}$', geslachtsnaam):  # noqa: E501
            raise ValueError(r"Invalid value for `geslachtsnaam`, must be a follow pattern or equal to `/^[a-zA-Z0-9À-ž \.\-\']{1,200}$/`")  # noqa: E501

        self._geslachtsnaam = geslachtsnaam

    @property
    def voorletters(self) -> str:
        """Gets the voorletters of this NaamGerelateerde.

        De voorletters van de persoon, afgeleid van de voornamen.   # noqa: E501

        :return: The voorletters of this NaamGerelateerde.
        :rtype: str
        """
        return self._voorletters

    @voorletters.setter
    def voorletters(self, voorletters: str):
        """Sets the voorletters of this NaamGerelateerde.

        De voorletters van de persoon, afgeleid van de voornamen.   # noqa: E501

        :param voorletters: The voorletters of this NaamGerelateerde.
        :type voorletters: str
        """
        if voorletters is not None and not re.search(r'^[a-zA-Z0-9À-ž \.]{1,40}$', voorletters):  # noqa: E501
            raise ValueError(r"Invalid value for `voorletters`, must be a follow pattern or equal to `/^[a-zA-Z0-9À-ž \.]{1,40}$/`")  # noqa: E501

        self._voorletters = voorletters

    @property
    def in_onderzoek(self) -> NaamInOnderzoek:
        """Gets the in_onderzoek of this NaamGerelateerde.


        :return: The in_onderzoek of this NaamGerelateerde.
        :rtype: NaamInOnderzoek
        """
        return self._in_onderzoek

    @in_onderzoek.setter
    def in_onderzoek(self, in_onderzoek: NaamInOnderzoek):
        """Sets the in_onderzoek of this NaamGerelateerde.


        :param in_onderzoek: The in_onderzoek of this NaamGerelateerde.
        :type in_onderzoek: NaamInOnderzoek
        """

        self._in_onderzoek = in_onderzoek
