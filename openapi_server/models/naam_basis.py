from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.adellijke_titel_predicaat_type import AdellijkeTitelPredicaatType
import re
from openapi_server import util

from openapi_server.models.adellijke_titel_predicaat_type import AdellijkeTitelPredicaatType  # noqa: E501
import re  # noqa: E501

class NaamBasis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, voornamen=None, adellijke_titel_predicaat=None, voorvoegsel=None, geslachtsnaam=None, voorletters=None, volledige_naam=None):  # noqa: E501
        """NaamBasis - a model defined in OpenAPI

        :param voornamen: The voornamen of this NaamBasis.  # noqa: E501
        :type voornamen: str
        :param adellijke_titel_predicaat: The adellijke_titel_predicaat of this NaamBasis.  # noqa: E501
        :type adellijke_titel_predicaat: AdellijkeTitelPredicaatType
        :param voorvoegsel: The voorvoegsel of this NaamBasis.  # noqa: E501
        :type voorvoegsel: str
        :param geslachtsnaam: The geslachtsnaam of this NaamBasis.  # noqa: E501
        :type geslachtsnaam: str
        :param voorletters: The voorletters of this NaamBasis.  # noqa: E501
        :type voorletters: str
        :param volledige_naam: The volledige_naam of this NaamBasis.  # noqa: E501
        :type volledige_naam: str
        """
        self.openapi_types = {
            'voornamen': str,
            'adellijke_titel_predicaat': AdellijkeTitelPredicaatType,
            'voorvoegsel': str,
            'geslachtsnaam': str,
            'voorletters': str,
            'volledige_naam': str
        }

        self.attribute_map = {
            'voornamen': 'voornamen',
            'adellijke_titel_predicaat': 'adellijkeTitelPredicaat',
            'voorvoegsel': 'voorvoegsel',
            'geslachtsnaam': 'geslachtsnaam',
            'voorletters': 'voorletters',
            'volledige_naam': 'volledigeNaam'
        }

        self._voornamen = voornamen
        self._adellijke_titel_predicaat = adellijke_titel_predicaat
        self._voorvoegsel = voorvoegsel
        self._geslachtsnaam = geslachtsnaam
        self._voorletters = voorletters
        self._volledige_naam = volledige_naam

    @classmethod
    def from_dict(cls, dikt) -> 'NaamBasis':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NaamBasis of this NaamBasis.  # noqa: E501
        :rtype: NaamBasis
        """
        return util.deserialize_model(dikt, cls)

    @property
    def voornamen(self) -> str:
        """Gets the voornamen of this NaamBasis.

        De verzameling namen voor de geslachtsnaam, gescheiden door spaties.   # noqa: E501

        :return: The voornamen of this NaamBasis.
        :rtype: str
        """
        return self._voornamen

    @voornamen.setter
    def voornamen(self, voornamen: str):
        """Sets the voornamen of this NaamBasis.

        De verzameling namen voor de geslachtsnaam, gescheiden door spaties.   # noqa: E501

        :param voornamen: The voornamen of this NaamBasis.
        :type voornamen: str
        """
        if voornamen is not None and len(voornamen) > 200:
            raise ValueError("Invalid value for `voornamen`, length must be less than or equal to `200`")  # noqa: E501
        if voornamen is not None and not re.search(r'^[a-zA-Z0-9À-ž \.\-\']{1,200}$', voornamen):  # noqa: E501
            raise ValueError(r"Invalid value for `voornamen`, must be a follow pattern or equal to `/^[a-zA-Z0-9À-ž \.\-\']{1,200}$/`")  # noqa: E501

        self._voornamen = voornamen

    @property
    def adellijke_titel_predicaat(self) -> AdellijkeTitelPredicaatType:
        """Gets the adellijke_titel_predicaat of this NaamBasis.


        :return: The adellijke_titel_predicaat of this NaamBasis.
        :rtype: AdellijkeTitelPredicaatType
        """
        return self._adellijke_titel_predicaat

    @adellijke_titel_predicaat.setter
    def adellijke_titel_predicaat(self, adellijke_titel_predicaat: AdellijkeTitelPredicaatType):
        """Sets the adellijke_titel_predicaat of this NaamBasis.


        :param adellijke_titel_predicaat: The adellijke_titel_predicaat of this NaamBasis.
        :type adellijke_titel_predicaat: AdellijkeTitelPredicaatType
        """

        self._adellijke_titel_predicaat = adellijke_titel_predicaat

    @property
    def voorvoegsel(self) -> str:
        """Gets the voorvoegsel of this NaamBasis.


        :return: The voorvoegsel of this NaamBasis.
        :rtype: str
        """
        return self._voorvoegsel

    @voorvoegsel.setter
    def voorvoegsel(self, voorvoegsel: str):
        """Sets the voorvoegsel of this NaamBasis.


        :param voorvoegsel: The voorvoegsel of this NaamBasis.
        :type voorvoegsel: str
        """
        if voorvoegsel is not None and len(voorvoegsel) > 10:
            raise ValueError("Invalid value for `voorvoegsel`, length must be less than or equal to `10`")  # noqa: E501
        if voorvoegsel is not None and not re.search(r'^[a-zA-Z \']{1,10}$', voorvoegsel):  # noqa: E501
            raise ValueError(r"Invalid value for `voorvoegsel`, must be a follow pattern or equal to `/^[a-zA-Z \']{1,10}$/`")  # noqa: E501

        self._voorvoegsel = voorvoegsel

    @property
    def geslachtsnaam(self) -> str:
        """Gets the geslachtsnaam of this NaamBasis.

        De achternaam van een persoon.   # noqa: E501

        :return: The geslachtsnaam of this NaamBasis.
        :rtype: str
        """
        return self._geslachtsnaam

    @geslachtsnaam.setter
    def geslachtsnaam(self, geslachtsnaam: str):
        """Sets the geslachtsnaam of this NaamBasis.

        De achternaam van een persoon.   # noqa: E501

        :param geslachtsnaam: The geslachtsnaam of this NaamBasis.
        :type geslachtsnaam: str
        """
        if geslachtsnaam is not None and not re.search(r'^[a-zA-Z0-9À-ž \.\-\']{1,200}$', geslachtsnaam):  # noqa: E501
            raise ValueError(r"Invalid value for `geslachtsnaam`, must be a follow pattern or equal to `/^[a-zA-Z0-9À-ž \.\-\']{1,200}$/`")  # noqa: E501

        self._geslachtsnaam = geslachtsnaam

    @property
    def voorletters(self) -> str:
        """Gets the voorletters of this NaamBasis.

        De voorletters van de persoon, afgeleid van de voornamen.   # noqa: E501

        :return: The voorletters of this NaamBasis.
        :rtype: str
        """
        return self._voorletters

    @voorletters.setter
    def voorletters(self, voorletters: str):
        """Sets the voorletters of this NaamBasis.

        De voorletters van de persoon, afgeleid van de voornamen.   # noqa: E501

        :param voorletters: The voorletters of this NaamBasis.
        :type voorletters: str
        """
        if voorletters is not None and not re.search(r'^[a-zA-Z0-9À-ž \.]{1,40}$', voorletters):  # noqa: E501
            raise ValueError(r"Invalid value for `voorletters`, must be a follow pattern or equal to `/^[a-zA-Z0-9À-ž \.]{1,40}$/`")  # noqa: E501

        self._voorletters = voorletters

    @property
    def volledige_naam(self) -> str:
        """Gets the volledige_naam of this NaamBasis.

        Combinatie van predicaat, voornamen, adellijke titel, voorvoegsels en geslachtsnaam, zonder toevoeging van een eventuele partnernaam.   # noqa: E501

        :return: The volledige_naam of this NaamBasis.
        :rtype: str
        """
        return self._volledige_naam

    @volledige_naam.setter
    def volledige_naam(self, volledige_naam: str):
        """Sets the volledige_naam of this NaamBasis.

        Combinatie van predicaat, voornamen, adellijke titel, voorvoegsels en geslachtsnaam, zonder toevoeging van een eventuele partnernaam.   # noqa: E501

        :param volledige_naam: The volledige_naam of this NaamBasis.
        :type volledige_naam: str
        """
        if volledige_naam is not None and not re.search(r'^[a-zA-Z0-9À-ž \.\-\']{1,450}$', volledige_naam):  # noqa: E501
            raise ValueError(r"Invalid value for `volledige_naam`, must be a follow pattern or equal to `/^[a-zA-Z0-9À-ž \.\-\']{1,450}$/`")  # noqa: E501

        self._volledige_naam = volledige_naam
