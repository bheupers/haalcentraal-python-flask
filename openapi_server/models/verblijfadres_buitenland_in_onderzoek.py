from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.abstract_datum import AbstractDatum
from openapi_server import util

from openapi_server.models.abstract_datum import AbstractDatum  # noqa: E501

class VerblijfadresBuitenlandInOnderzoek(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datum_ingang_onderzoek=None, regel1=None, regel2=None, regel3=None, land=None):  # noqa: E501
        """VerblijfadresBuitenlandInOnderzoek - a model defined in OpenAPI

        :param datum_ingang_onderzoek: The datum_ingang_onderzoek of this VerblijfadresBuitenlandInOnderzoek.  # noqa: E501
        :type datum_ingang_onderzoek: AbstractDatum
        :param regel1: The regel1 of this VerblijfadresBuitenlandInOnderzoek.  # noqa: E501
        :type regel1: bool
        :param regel2: The regel2 of this VerblijfadresBuitenlandInOnderzoek.  # noqa: E501
        :type regel2: bool
        :param regel3: The regel3 of this VerblijfadresBuitenlandInOnderzoek.  # noqa: E501
        :type regel3: bool
        :param land: The land of this VerblijfadresBuitenlandInOnderzoek.  # noqa: E501
        :type land: bool
        """
        self.openapi_types = {
            'datum_ingang_onderzoek': AbstractDatum,
            'regel1': bool,
            'regel2': bool,
            'regel3': bool,
            'land': bool
        }

        self.attribute_map = {
            'datum_ingang_onderzoek': 'datumIngangOnderzoek',
            'regel1': 'regel1',
            'regel2': 'regel2',
            'regel3': 'regel3',
            'land': 'land'
        }

        self._datum_ingang_onderzoek = datum_ingang_onderzoek
        self._regel1 = regel1
        self._regel2 = regel2
        self._regel3 = regel3
        self._land = land

    @classmethod
    def from_dict(cls, dikt) -> 'VerblijfadresBuitenlandInOnderzoek':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VerblijfadresBuitenlandInOnderzoek of this VerblijfadresBuitenlandInOnderzoek.  # noqa: E501
        :rtype: VerblijfadresBuitenlandInOnderzoek
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datum_ingang_onderzoek(self) -> AbstractDatum:
        """Gets the datum_ingang_onderzoek of this VerblijfadresBuitenlandInOnderzoek.


        :return: The datum_ingang_onderzoek of this VerblijfadresBuitenlandInOnderzoek.
        :rtype: AbstractDatum
        """
        return self._datum_ingang_onderzoek

    @datum_ingang_onderzoek.setter
    def datum_ingang_onderzoek(self, datum_ingang_onderzoek: AbstractDatum):
        """Sets the datum_ingang_onderzoek of this VerblijfadresBuitenlandInOnderzoek.


        :param datum_ingang_onderzoek: The datum_ingang_onderzoek of this VerblijfadresBuitenlandInOnderzoek.
        :type datum_ingang_onderzoek: AbstractDatum
        """

        self._datum_ingang_onderzoek = datum_ingang_onderzoek

    @property
    def regel1(self) -> bool:
        """Gets the regel1 of this VerblijfadresBuitenlandInOnderzoek.


        :return: The regel1 of this VerblijfadresBuitenlandInOnderzoek.
        :rtype: bool
        """
        return self._regel1

    @regel1.setter
    def regel1(self, regel1: bool):
        """Sets the regel1 of this VerblijfadresBuitenlandInOnderzoek.


        :param regel1: The regel1 of this VerblijfadresBuitenlandInOnderzoek.
        :type regel1: bool
        """

        self._regel1 = regel1

    @property
    def regel2(self) -> bool:
        """Gets the regel2 of this VerblijfadresBuitenlandInOnderzoek.


        :return: The regel2 of this VerblijfadresBuitenlandInOnderzoek.
        :rtype: bool
        """
        return self._regel2

    @regel2.setter
    def regel2(self, regel2: bool):
        """Sets the regel2 of this VerblijfadresBuitenlandInOnderzoek.


        :param regel2: The regel2 of this VerblijfadresBuitenlandInOnderzoek.
        :type regel2: bool
        """

        self._regel2 = regel2

    @property
    def regel3(self) -> bool:
        """Gets the regel3 of this VerblijfadresBuitenlandInOnderzoek.


        :return: The regel3 of this VerblijfadresBuitenlandInOnderzoek.
        :rtype: bool
        """
        return self._regel3

    @regel3.setter
    def regel3(self, regel3: bool):
        """Sets the regel3 of this VerblijfadresBuitenlandInOnderzoek.


        :param regel3: The regel3 of this VerblijfadresBuitenlandInOnderzoek.
        :type regel3: bool
        """

        self._regel3 = regel3

    @property
    def land(self) -> bool:
        """Gets the land of this VerblijfadresBuitenlandInOnderzoek.


        :return: The land of this VerblijfadresBuitenlandInOnderzoek.
        :rtype: bool
        """
        return self._land

    @land.setter
    def land(self, land: bool):
        """Sets the land of this VerblijfadresBuitenlandInOnderzoek.


        :param land: The land of this VerblijfadresBuitenlandInOnderzoek.
        :type land: bool
        """

        self._land = land
