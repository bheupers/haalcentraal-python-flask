from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.abstract_datum import AbstractDatum
import re
from openapi_server import util

from openapi_server.models.abstract_datum import AbstractDatum  # noqa: E501
import re  # noqa: E501

class AdresAllOfDatumIngangGeldigheid(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, lang_formaat=None):  # noqa: E501
        """AdresAllOfDatumIngangGeldigheid - a model defined in OpenAPI

        :param type: The type of this AdresAllOfDatumIngangGeldigheid.  # noqa: E501
        :type type: str
        :param lang_formaat: The lang_formaat of this AdresAllOfDatumIngangGeldigheid.  # noqa: E501
        :type lang_formaat: str
        """
        self.openapi_types = {
            'type': str,
            'lang_formaat': str
        }

        self.attribute_map = {
            'type': 'type',
            'lang_formaat': 'langFormaat'
        }

        self._type = type
        self._lang_formaat = lang_formaat

    @classmethod
    def from_dict(cls, dikt) -> 'AdresAllOfDatumIngangGeldigheid':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Adres_allOf_datumIngangGeldigheid of this AdresAllOfDatumIngangGeldigheid.  # noqa: E501
        :rtype: AdresAllOfDatumIngangGeldigheid
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this AdresAllOfDatumIngangGeldigheid.


        :return: The type of this AdresAllOfDatumIngangGeldigheid.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this AdresAllOfDatumIngangGeldigheid.


        :param type: The type of this AdresAllOfDatumIngangGeldigheid.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def lang_formaat(self) -> str:
        """Gets the lang_formaat of this AdresAllOfDatumIngangGeldigheid.


        :return: The lang_formaat of this AdresAllOfDatumIngangGeldigheid.
        :rtype: str
        """
        return self._lang_formaat

    @lang_formaat.setter
    def lang_formaat(self, lang_formaat: str):
        """Sets the lang_formaat of this AdresAllOfDatumIngangGeldigheid.


        :param lang_formaat: The lang_formaat of this AdresAllOfDatumIngangGeldigheid.
        :type lang_formaat: str
        """
        if lang_formaat is None:
            raise ValueError("Invalid value for `lang_formaat`, must not be `None`")  # noqa: E501
        if lang_formaat is not None and not re.search(r'^[a-z0-9 ]{1,17}$', lang_formaat):  # noqa: E501
            raise ValueError(r"Invalid value for `lang_formaat`, must be a follow pattern or equal to `/^[a-z0-9 ]{1,17}$/`")  # noqa: E501

        self._lang_formaat = lang_formaat
